[alias]
  s                = status --short
  lg               = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --

  # Undo a `git push`
  undopush         = push --force origin HEAD^:master

  # Pretty log
  prettylog        = log --name-only --decorate=full

  # Clean up history. Useful for feature branches with lots of silly little commits you don't want in master's history.
  cleanup          = !git rebase --interactive origin/master

  # Log Me
  logme            = log --color --name-only --decorate=full --author="Jesse"

  # Get Incoming Changes
  incoming         = log ..@{u}

  # Get Outgoing Changes
  outgoing         = log @{u}..

  # Merges the latest from master into your feature branch keeping you up-to-date.
  remaster         = !git stash && git fetch origin && git merge origin/master && git stash pop;

  # Reset previous commit, but keep all the associated changes. Useful for avoiding nasty git merge commits.
  damnit           = reset --soft HEAD^

  # Destroy all local changes and reset to HEAD.
  fuckit           = reset --hard HEAD

  # For morning stand-up.
  standup          = !"git log --reverse --branches --since=$(if [[ "Mon" == "$(date +%a)" ]]; then echo "last friday"; else echo "yesterday"; fi) --author='Jesse Atkinson' --format=format:'%C(cyan) %ad %C(yellow)%h %Creset %s %Cgreen%d' --date=local"

  # list branch dates
  branchdate       = !git for-each-ref --sort='-authordate' --format='%(refname)%09%(authordate)' refs/heads | sed -e 's-refs/heads/--'

  # A quick way to get fired.
  # yolo           = !git add -A && and git commit -am '#YOLO' && git push --force origin master

  # Delete all branches that have already been merged into the current branch.
  deletemerged = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"

[apply]
  whitespace       = fix

[core]
  attributesfile   = ~/.gitattributes
  autocrlf         = input
  excludesfile     = /opt/boxen/config/git/gitignore
  ignorecase       = false
  whitespace       = fix,space-before-tab,tab-in-indent,trailing-space
  editor           = /usr/local/bin/vim # Something about my .vimrc makes specifying the which git to use necessary here.  If I find out what it I'm going to murder it.

[color "branch"]
  current          = yellow reverse
  local            = yellow
  remote           = green

[color "diff"]
  frag             = magenta bold
  meta             = yellow bold
  new              = green bold
  old              = red bold

[color "status"]
  added            = yellow
  changed          = green
  untracked        = cyan

[merge]
  log              = true

[grep]
  patternType      = "fixed"

[url "git@github.com:"]
  insteadOf        = "gh:"
  pushInsteadOf    = "github:"
  pushInsteadOf    = "git://github.com/"

[url "git://github.com/"]
  insteadOf        = "github:"

[url "git@gist.github.com:"]
  insteadOf        = "gst:"
  pushInsteadOf    = "gist:"
  pushInsteadOf    = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf        = "gist:"

[branch]
  autosetuprebase  = always

[push]
  default          = tracking

[help]
  autocorrect      = 1

# Any GitHub repo with my username should be checked out r/w by default
# http://rentzsch.tumblr.com/post/564806957/public-but-hackable-git-submodules
[url "git@github.com:jsatk/"]
  insteadOf        = "git://github.com/jsatk/"

[user]
  email            = jesse.atkinson@me.com
  name             = 'Jesse Atkinson'

[hub]
protocol           = https
