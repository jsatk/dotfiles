# alias ------------------------------------------------------------------- {{{

[alias]
	# These aliases are (or should be) in alphabetical order.

	# List all aliases.
	# Stolen from here:
	# https://twitter.com/TrevorBramble/status/774292970681937920
	aliases = config --get-regexp '^alias\\.'

	# Append staged changes to head commit.
	# Great for when you forget to add something.
	append = commit --amend --no-edit

	# List all branches.
	branches = branch -a

	# List branch dates
	branchdate = !git for-each-ref --sort='-authordate' --format='%(refname)%09%(authordate)' refs/heads | sed -e 's-refs/heads/--'

	# Reset previous commit, but keep all the associated changes. Useful for
	# avoiding nasty git merge commits.
	damnit = reset --soft HEAD^
	dammit = reset --soft HEAD^

	# Delete all branches that have already been merged into the current
	# branch.
	deletemerged = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"

	# Destroy all local changes and reset to HEAD.
	fuckit = reset --hard HEAD

	# Prints the SHA of the head commit.  I find myself needing to do this
	# often enough for hot-fixes where I cherry-pick a commit over.  I'm
	# making an alias for this because I can never remember the `%H` bit.
	#
	# The most practical application of this looks something like the
	# following (which assumes a macOS environment).
	#
	# $ git headsha | pbcopy
	# $ git checkout hot-fix-branch
	# $ git cherry-pick <PASTE>
	#
	# And yes – if you're clever – you can pipe to `xargs` to cherry-pick
	# this all in one line.
	headsha = log -1 --pretty=format:'%H'

	# Log w/o CE auto-robo commits
	lg = log --no-merges --invert-grep --grep="FH-000"

	# Log Me
	logme = log --color --name-only --decorate=full --author="jesse.atkinson@creditkarma.com"

	# Log the team's commit messages; exclude the release robot's commits
	# which simply duplicate the commit messages before.  Makes reading the
	# work history easier.
	logus = log --perl-regexp --author='^((?!ci-service-release-ck).*)$'

	# Get Incoming Changes
	incoming = log ..@{u}

	# Get Outgoing Changes
	outgoing = log @{u}..

	# A slightly-less-destructive and risky git push --force
	# --force-with-lease ensures you won't overwrite any work on the remote
	# branch if more commits were added to the remote branch (by another
	# team-member or coworker, etc.). It ensures you do not overwrite
	# someone elses work by --force pushing.
	please = push --force-with-lease

	# Create a new pull request on GitHub.
	pr = "!gh pr create --web"

	# I like to praise people as well.
	# https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/#praise-people
	praise = blame

	# Great for generating release notes.
	#
	# Example usage:
	#
	# Print it to stdout.
	# $ git release-notes v0.27.3..v0.27.9
	#
	# To send it to the Clipboard on macOS.
	# $ git release-notes v0.27.3..v0.27.9 | pbcopy
	#
	# Send it to vim for editing.
	# $ git release-notes v0.27.3..v0.27.9 | vim -
	#
	# To customize this for your own org/workplace you'll need to edit two things.
	#
	# You can either remove the --invert-grep flag on the git log line if you
	# don't have any commit you want to filter out (we have a bunch of robo
	# commits that I don't want in release notes); or keep it up and update it to
	# whatever matches the commits you want to ignore in your own release-notes.
	release-notes = "!f() { \
		PR_URL=\"$(git config remote.origin.url)/pull/\"; \
		git log $1 --no-merges --oneline --pretty=format:'%s' --invert-grep --grep=\"Setting version to\" | \
		sed \"s|(#|($PR_URL|g\"; \
	}; f"

	# List all remotes.
	remotes = remote -v

	# Prints the top level dir of the git repo.
	root = rev-parse --show-toplevel

	# Show all changes that are currently staged for commit.
	staged = diff --cached

	# Prints a one-liner of all commits I made last week.
	# Nice for Monday morning stand-up/sprint planning.
	summary = log --abbrev-commit --pretty=oneline --author='Jesse Atkinson' --since=last.mon --reverse

	# List all tags.
	tags = tag -l

	# Undo a `git push`
	undopush = push --force origin HEAD^:master

	# - Cuts a new branch.
	# - Sets the default destination of `pull` to whatever branch we're cutting from
	#   (typically `master`).
	# - Sets the default destination of `push` to the branch we're creating.
	#
	# Since we have `pull.rebase = true` this means that every `pull` will rebase
	# this branch's commits on top of the branch we cut from.  Meaning that after
	# we do a `git pull` in order to push we have to do a force push which is
	# dangerous when collaborating.  In order to avoid awful situations use `git
	# push --force-with-lease` which I have aliased to `git please`.  (The
	# --force-with-lease flag prevents you from force pushing over the top of a
	# colleagues commits if they commited on top of you and you haven't pulled
	# those commits.)
	work = !sh -c 'git fetch && git checkout @{upstream} -t -b \"$@\"' _

# }}}
# apply ------------------------------------------------------------------- {{{

[apply]
	whitespace = fix

# }}}
# branch ------------------------------------------------------------------ {{{

[branch]
	autosetuprebase = always

# }}}
# color ------------------------------------------------------------------- {{{

[color]
	ui = true

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	frag = magenta bold
	meta = yellow
	new = green bold
	old = red bold
	commit = yellow bold
	whitespace = red reverse

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

# }}}
# commit ------------------------------------------------------------------ {{{

[commit]
	cleanup = scissors
	gpgsign = true
	template = ~/.gitmessage

# }}}
# core -------------------------------------------------------------------- {{{

[core]
	attributesfile = ~/.gitattributes
	autocrlf = input
	ignorecase = false
	whitespace = fix,space-before-tab,tab-in-indent,trailing-space
	pager = delta
	excludesfile = ~/.gitignore

# }}}
# credential -------------------------------------------------------------- {{{

[credential]
	helper = osxkeychain

# }}}
# delta ------------------------------------------------------------------- {{{

[delta]
	navigate = true  # use n and N to move between diff sections

# }}}
# diff -------------------------------------------------------------------- {{{

[diff]
	algorithm = patience
 	colorMoved = default

# }}}
# github ------------------------------------------------------------------ {{{

[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

# Any GitHub repo with my username should be checked out r/w by default
# http://rentzsch.tumblr.com/post/564806957/public-but-hackable-git-submodules
[url "git@github.com:jsatk/"]
	insteadOf = "git://github.com/jsatk/"

[user]
	email = jesse.atkinson@creditkarma.com
	name = Jesse Atkinson
	signingkey = "DC5AC6E4"

# }}}
# gpg --------------------------------------------------------------------- {{{

[gpg]
	program = gpg

# }}}
# grep -------------------------------------------------------------------- {{{

[grep]
	patternType = "fixed"

# }}}
# help -------------------------------------------------------------------- {{{

[help]
	autocorrect = 1

# }}}
# init -------------------------------------------------------------------- {{{

[init]
	defaultBranch = main

# }}}
# interactive ------------------------------------------------------------- {{{

[interactive]
	diffFilter = delta --color-only

# }}}
# merge ------------------------------------------------------------------- {{{

[merge]
	log = true
	tool = vimdiff
	conflictstyle = diff3

# }}}
# pull -------------------------------------------------------------------- {{{

[pull]
	rebase = true

# }}}
# push -------------------------------------------------------------------- {{{

[push]
	default = current

# }}}
# rebase ------------------------------------------------------------------ {{{

[rebase]
	autoStash = true
	autoSquash = true

# }}}
# rerere ------------------------------------------------------------------ {{{

[rerere]
	enabled = true

# }}}
# web --------------------------------------------------------------------- {{{

[web]
	browser = chrome

# }}}

# vim: textwidth=80:noexpandtab:shiftwidth=8:tabstop=8
# vim: foldmethod=marker:foldmarker={{{,}}}:syntax=gitconfig
