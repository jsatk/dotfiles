" Vim Plugins ------------------------------------------------------------- {{{

" The following check is done in vim-sensible, however as of this writing that
" check doesn't apply to Vim 8.  Until vim-dispatch works nicely with Fish shell
" or until vim-sensible's Fish shell check applies to Vim 8 and above I need to
" manually force my shell here.  Also setting it to simply `sh` instead of
" `/bin/bash` because vim-dispatch apparently has trouble inferring the PID of
" the task when `shell` is set to `/bin/bash`.  Computers are hard.
"
" See: https://github.com/tpope/vim-sensible/blob/master/plugin/sensible.vim#L66-L68
if &shell =~# 'fish$'
  set shell=sh
endif

call plug#begin()

" Add other plugins here.
Plug 'ap/vim-css-color'
Plug 'dag/vim-fish'
Plug 'derekwyatt/vim-sbt'
Plug 'derekwyatt/vim-scala'
Plug 'fatih/vim-go'
Plug 'itchyny/lightline.vim'
Plug 'janko/vim-test'
Plug '/usr/local/opt/fzf' " Tells vim-fzf where fzf install is.
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/gv.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-peekaboo'
Plug 'Konfekt/FastFold'
Plug 'kovisoft/paredit'
Plug 'l04m33/vlime'
Plug 'morhetz/gruvbox'
Plug 'mxw/vim-jsx'
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.sh'}
Plug 'nicholaides/words-to-avoid.vim'
Plug 'pangloss/vim-javascript'
Plug 'rizzatti/dash.vim'
Plug 'rust-lang/rust.vim'
Plug 'sgur/vim-editorconfig'
Plug 'tmux-plugins/vim-tmux'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-db'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'udalov/kotlin-vim'
Plug 'vim-scripts/LargeFile'
Plug 'w0rp/ale'

call plug#end()

" }}}
" Basic Options ----------------------------------------------------------- {{{

" If you want to more information about a setting here put your cursor on the
" setting and press `K`.  This will open the help for that item in a split.
" This works for many languages in vim.

set autoread
set autowrite
set breakindent
" A |sentence| has to be followed by two spaces after the '.', '!' or '?'.
" See: http://stevelosh.com/blog/2012/10/why-i-two-space/#power
set cpo+=J
set cursorline
set expandtab
set gdefault
set hidden
set hlsearch
set ignorecase " Ignore the case, unless...
set laststatus=2
set lazyredraw
set linebreak
set list " Show select “invisible” characters
set matchtime=3
set mousehide
set nf=octal,hex,alpha " Increment alpha strings with vim
set nostartofline
set scrolloff=3
set shiftround
set shiftwidth=2
set showbreak=↪
set showcmd
set showmatch
set showmode
set smartcase  " ...there's caps in it.
set softtabstop=2
set splitbelow
set splitright
set synmaxcol=800
set t_Co=256
set textwidth=0
set timeoutlen=500
set title
set ttyfast
set updatetime=300
set wildmode=list:longest
set wrapmargin=0

if has('mouse')
  set mouse=a
endif

" }}}
" Spelling ---------------------------------------------------------------- {{{

" Stolen from Steve Losh
"
" There are three dictionaries I use for spellchecking:
"
"   /usr/share/dict/words
"   Basic stuff.
"
"   ~/.vim/custom-dictionary.utf-8.add
"   Custom words (like my name).  This is in my (version-controlled) dotfiles.
"
"   ~/.vim-local-dictionary.utf-8.add
"   More custom words.  This is *not* version controlled, so I can stick
"   work stuff in here without leaking internal names and shit.
"
" I also remap zG to add to the local dict (vanilla zG is useless anyway).
set dictionary=/usr/share/dict/words
set spellfile=~/.vim/custom-dictionary.utf-8.add,~/.vim-local-dictionary.utf-8.add
nnoremap zG 2zg

" }}}
" Look & Feel ------------------------------------------------------------- {{{

" We must set the lightline colorscheme *before* the vim colorscheme, because...
" computers...
" The actual `gruvbox` colorscheme comes from the gruvbox plugin, not the
" lightline plugin.
let g:lightline = {'colorscheme': 'gruvbox'}

set background=dark
colorscheme gruvbox

highlight Comment cterm=italic

set guifont=OperatorMonoForPowerline-Book:h18

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

set fillchars=diff:⣿,vert:│

" }}}
" Convenience Mappings ---------------------------------------------------- {{{

let mapleader = ","
let maplocalleader = "\\"
" Do not show stupid q: window
noremap q: :q
" I don't know how to use ex mode and it scares me.
noremap Q <Nop>
" Split line (sister to [J]oin lines)
nnoremap S i<cr><esc><right>
" switch to last file
nnoremap <leader><leader> <c-^>
" redraw the buffer
nnoremap <leader>r :redraw!<cr>
" Don't jump-to-next when I use * to search for what's under cursor.
nnoremap * *<c-o>
" <C-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <c-l> :nohlsearch<cr><c-l>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Clean trailing whitespace.
nnoremap <leader>w mz:%s/\s\+$//<cr>:let @/=''<cr>`z

" My garbage brain can't ever remember digraph codes
inoremap <c-k><c-k> <esc>:help digraph-table<cr>

" Only show cursorline in the current window and in normal mode.
augroup cline
  autocmd!

  autocmd WinLeave,InsertEnter * set nocursorline
  autocmd WinEnter,InsertLeave * set cursorline
augroup END

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" Toggle quickfix
function! QuickFixIsOpen()
  let l:result = filter(getwininfo(), 'v:val.quickfix && !v:val.loclist')
  return !empty(l:result)
endfunction
nnoremap yoq :<C-R>=QuickFixIsOpen() ? "cclose" : "copen"<CR><CR>

" }}}
" Quick Editing ----------------------------------------------------------- {{{

nnoremap <leader>ed :vsplit ~/.vim/custom-dictionary.utf-8.add<cr>
nnoremap <leader>ef :vsplit ~/.config/fish/config.fish<cr>
nnoremap <leader>eg :vsplit ~/.gitconfig<cr>
nnoremap <leader>em :vsplit ~/.muttrc<cr>
nnoremap <leader>et :vsplit ~/.tmux.conf<cr>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" }}}
" Folding ----------------------------------------------------------------- {{{

set foldenable
set foldlevelstart=0

nnoremap <Space> za
vnoremap <Space> za
nnoremap zO zczO

" "Focus" the current line.  Basically:
"
" 1. Close all folds.
" 2. Open just the folds containing the current line.
" 3. Move the line to a bit (25 lines) down from the top of the screen.
" 4. Pulse the cursor line.  My eyes are bad.
"
" This mapping wipes out the z mark, which I never use.
function! FocusLine()
    let oldscrolloff = &scrolloff
    set scrolloff=0
    execute "keepjumps normal! mzzMzvzt25\<c-y>`z:Pulse\<cr>"
    let &scrolloff = oldscrolloff
endfunction
nnoremap <leader>z :call FocusLine()<cr>

" This function defines what folded text looks like.
function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

" }}}
" Trailing Whitespace ----------------------------------------------------- {{{

" Only show when not in insert mode.
augroup trailing
  autocmd!

  autocmd InsertEnter * :set listchars-=trail:⌴
  autocmd InsertLeave * :set listchars+=trail:⌴
augroup END

" }}}
" Line Return ------------------------------------------------------------- {{{

" Make sure Vim returns to the same line when you reopen a file.
augroup line_return
  autocmd!

  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     execute 'normal! g`"zvzz' |
    \ endif
augroup END

" }}}
" Backups ----------------------------------------------------------------- {{{

set undofile                      " Maintain undo history between sessions
set backup                        " enable backups
set noswapfile                    " it's 2019, Vim.
" The extra slash on the end saves files under the name of their full path
" with the / character replaced with a %.
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif

if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif

if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif

" }}}
" Vim Plugin Configurations ----------------------------------------------- {{{

" Asynchronous Lint Engine (ALE) {{{

highlight clear ALEErrorSign " otherwise uses error bg color (typically red)
highlight clear ALEWarningSign " otherwise uses error bg color (typically red)

let g:ale_statusline_format = ['X %d', '? %d', '']

" %linter% is the name of the linter that provided the message
" %s is the error or warning message
let g:ale_echo_msg_format = '%linter% says: "%severity% %...code...% – %s'

" Note: Using |:*noremap| will not work with <Plug> mappings.
nmap <leader>t <Plug>(ale_hover)

" This overwrites the default behavior of <C-]>, which deals with tag jumping.
" I'm sure this is sacralidge to some, but I so rarely use ctags (or similar)
" and find often what I want these tools to do is to do *exactly* what
" `:ALEGoToDefinition` already does.  So mapping it here.  The inverse of the
" default behavior of <C-]> is <C-t>, which I've mapped to `:Files<CR>` because
" <C-t> is the default fuzzy finder shortcut in many text editors.  The default
" behavior of <C-t> is so rarely used, and I find <C-o> to do what <C-t> would
" do 90% of the time that losing these default mappings in favor of better ones
" (at least for me) is worth it to me.
" Note: Using |:*noremap| will not work with <Plug> mappings.
nmap <C-]> <Plug>(ale_go_to_definition)

" }}}
" Dispatch {{{

" For reasons beyond my understanding the single space between the `|` and `tee`
" where `shellpipe` is set in the Dispatch plugin causes my Javascript test
" output to have a bunch of ugly ^[[1A characters when it's displayed in the
" quickfix window.  Dropping that space fixes it.  I've no idea why.
"
" See: https://github.com/tpope/vim-dispatch/issues/222#issuecomment-493273080
set shellpipe=2>&1\|tee

nnoremap <F9> :Dispatch<CR>

" }}}
" EasyAlign {{{

" Start interactive EasyAlign in visual mode (e.g. vipga).
" Note: Using |:*noremap| will not work with <Plug> mappings.
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
" Intentionally not using `nnoremap`.
" Note: Using |:*noremap| will not work with <Plug> mappings.
nmap ga <Plug>(EasyAlign)

" }}}
" fzf {{{

if has('nvim') || has('gui_running')
  let $FZF_DEFAULT_OPTS .= ' --inline-info'
endif

" Alias for searching all files and showing preview of file contents.
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" Search in files.
nnoremap <C-t> :<C-u>Files<CR>
" Search in vim buffers.
nnoremap <C-t><C-f> :<C-u>Buffers<CR>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" }}}
" Javascript {{{

let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1

" }}}
" Projectionist {{{

let g:projectionist_heuristics = {
      \ "*.markdown|*.md": {
      \   "*.md": { "dispatch": "open -a 'Marked 2.app' {file}" },
      \   "*.markdown": { "dispatch": "open -a 'Marked 2.app' {file}" }
      \ },
      \ "package.json": {
      \   "package.json": { "type": "package" }
      \ },
      \ "Cargo.toml": {
      \   "src/*.rs": {
      \     "type": "src",
      \     "alternate": "tests/{}.rs"
      \   },
      \   "tests/*.rs": {
      \     "type": "test",
      \     "alternate": "src/{}.rs",
      \     "dispatch": "cargo test {}"
      \   },
      \   "benchmarks/*.rs": {
      \     "type": "bench"
      \   },
      \   "Cargo.toml": { "type": "config" }
      \ }}

" }}}
" Vlime {{{

set rtp+=~/.vim/pack/minpac/start/vlime/vim
" We have to manually call this to update the helptags after manually updating
" the runtime path.
"
" See: https://github.com/k-takata/minpac/issues/33
helptags ALL

let g:vlime_compiler_policy = {"DEBUG": 3}

" }}}

" }}}
" Mini-plugins ------------------------------------------------------------ {{{

" Pulse Line {{{

" TODO: Replace this with a proper plugin when you can.
" Stolen from Steve Losh.
function! s:Pulse()
    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    let steps = 8
    let width = 1
    let start = width
    let end = steps * width
    let color = 233

    for i in range(start, end, width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor
    for i in range(end, start, -1 * width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor

    execute 'hi ' . old_hi
endfunction
command! -nargs=0 Pulse call s:Pulse()

" }}}
" Arc/Phabricator {{{

augroup arcrc
  autocmd!

  autocmd BufRead,BufNewFile .arcrc setlocal filetype=json
augroup END

" Phabricator is the worst, but I have to deal with it so here I am.  This is
" a tiny wrapper I made so that I can simply run arc commands from inside vim
" without having to type `:Dispatch` first.  Maybe someday I'll expand on this
" and make it a proper plugin.
"
" Examples:
" :Arc diff --verbatim --browse
" :Arc upload ~/Desktop/screenshot.png
" :Arc amend
" :Arc land --onto master
function! s:Arc(cmd)
  execute "Dispatch arc " . a:cmd
endfunction
command! -nargs=1 Arc call s:Arc(<f-args>)

" }}}

" }}}

set secure " Disables unsafe commands in project-specific .vimrc files.
set exrc " Allows for project-specific vimrc files.

" vim: set foldmethod=marker foldlevel=0:
