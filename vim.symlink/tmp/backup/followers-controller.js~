AdvisorApp.module('InitiativeModule.Followers', function(Followers, App) {

    var moduleChannel;

    var followerEntities;

    var initiativeEntity;

    var cardView;

    /**
     * Followers table columns
     * @type {Array}
     */
    var cardColumns = [
        {
            name: '',
            cell: 'select-row',
            headerCell: 'select-all'
        },
        {
            name: '',
            label: 'User',
            sortable: false,
            cell: Backgrid.Extension.SCUserName
        }
    ];

    var messages = App.module('Common.Language').en.initiativeEditMessages;

    var isEdited = false;

    /**
     * Load Followers card
     * @param {Object} options
     * @param {Object} options.region
     * @param {Object} options.initiative - initiative model
     */
    var loadCardView = function(options) {
        if (!options || !options.region) {return;}
        initiativeEntity = options.initiative;
        followerEntities = initiativeEntity.get('followers');
        followerEntities.on('add remove', setEdited);
        cardView = new (moduleChannel.reqres.request('common:grid:edit:View'))({
            collectionFilters: {
                'full': true
            },
            columns: cardColumns,
            collection: followerEntities,
            showPagination: false,
            label: 'Followers'
        });
        cardView.on(cardEvents);
        options.region.show(cardView);
        moduleChannel.vent.trigger('edit:card:loaded', {
            label: 'Followers',
            collection: followerEntities,
            uiSummaryLabel: 'followers'
        });
    };

    var showForm = function() {
        var select2Options = {
            entityURl: initiativeEntity.get('resource_uri') + 'potential_follower/',
<<<<<<< HEAD
            formatName: AdvisorApp.Common.Language.en.getUserNameHTML,
            collection: followerEntities,
=======
            formatName: AdvisorApp.module('Common.Language').en.getUserNameHTML,
>>>>>>> 4f7fdb6f59a6744915ae8be39bbd4d07b6f6cbca
            placeholder: 'search by name or email',
            minimumInputLength: 2
        };
        var formView = new (moduleChannel.reqres.request('common:grid:edit:form:View'))({
            label: 'Follower',
            title: 'Select Follower',
            select2Options: select2Options,
            searchType: 'search'
        });
        App.modalRegion.show(formView);
        formView.on(formEvents);
        formView.receivingView = this;
    };

    var cardEvents = {
        'show': function() {
            var tableView = new Backbone.SCDataTable.View(this.options);
            this.tableRegion.show(tableView);
            tableView.fetchCollection();
        },
        'show:form': showForm,
        'add': function(follower) {
            this.addToTable(follower);
        }
    };

    var formEvents = {
        'add': function(follower) {
            this.receivingView.trigger('add', follower);
            this.triggerMethod('modal:close');
        }
    };

    var setEdited = function() {
        isEdited = true;
        cardView.triggerMethod('error', messages.UNSAVED);
        return this;
    };

    var saveSuccess = function() {
        isEdited = false;
        cardView.triggerMethod('clearError');
    };

    var saveError = function() {
        cardView.triggerMethod('error', messages.SAVE_ERROR);
    };

    var save = function() {
        if (isEdited) {
            getEditedData().done(function(editedData) {
                saveFollowers(editedData)
                .done(saveSuccess)
                .fail(saveError);
            });
        }
    };

    var saveFollowers = function(editedData) {
        var defer = $.Deferred();
        var pending = [];
        _.each(editedData.toDelete, function(id) {
            pending.push(syncFollower(id, 'DELETE'));
        });
        _.each(editedData.toPost, function(id) {
            pending.push(syncFollower(id, 'POST'));
        });
        $.when.apply($, pending).then(defer.resolve, defer.reject);
        return defer.promise();
    };

    var fetchSavedFollowerIds = function() {
        return $.ajax({
            type: 'GET',
            url: followerEntities.url(),
            dataType:'json'
        });
    };

    var getEditedData = function() {
        var defer = $.Deferred();
        fetchSavedFollowerIds()
        .done(function(response) {
            var savedFollowersIds = response.objects;
            var viewFollowersIds = _.pluck(followerEntities.toJSON(), 'id');
            var toDelete = _.difference(savedFollowersIds, viewFollowersIds);
            var toPost = _.difference(viewFollowersIds, savedFollowersIds);
            defer.resolve({
                toDelete: toDelete,
                toPost: toPost
            });
        })
        .fail(function() {
            defer.reject();
        });
        return defer.promise();
    };

    var syncFollower = function(id, method) {
        var defer = $.Deferred();
        var url = followerEntities.url() + id;
        $.ajax({
            type: method,
            url: url,
            dataType:'json'
        })
        .always(function(dataOrXhr, textStatus, xhrOrError) {
            var xhr = dataOrXhr || xhrOrError;
            var status = xhr && xhr.status;
            if (status >= 200 && status <= 299) {
                defer.resolve();
            } else {
                defer.reject();
            }
        });
        return defer;
    };

    App.module('InitiativeModule').on('start', function() {
        moduleChannel = this.moduleChannel;
        moduleChannel.commands.setHandlers({
            'followers:card:load': loadCardView,
            'edit:save': save
        });
        moduleChannel.vent.on('edit:save:all', save);
    });

});
