AdvisorApp.module('InitiativeModule.Pixels', function(Pixels, App) {

    var moduleChannel;

    var pixelEntities;

    var initiativeEntity;

    var cardView;

    /**
     * Pixels table columns
     * @type {Array}
     */
    var cardColumns = [
        {
            name: '',
            cell: 'select-row',
            headerCell: 'select-all'
        },
        {
            name: 'name',
            label: 'Name',
            cell: Backgrid.Extension.SCPixelName
        }
    ];

    var messages = App.module('Common.Language').en.initiativeEditMessages;

    var isEdited = false;

    /**
     * Load Pixels card
     * @param {Object} options
     * @param {Object} options.region
     * @param {Object} options.initiative - initiative model
     */
    var loadCardView = function(options) {
        if (!options || !options.region) {return;}
        initiativeEntity = options.initiative;
        var filters = {
            'initiatives': initiativeEntity.id,
            'type': 'conversion'
        };
        pixelEntities = new (App.request('advisor:pixel:PageableEntities'))();
        pixelEntities.on('add remove', setEdited);
        cardView = new (moduleChannel.reqres.request('common:grid:edit:View'))({
            collectionFilters: filters,
            columns: cardColumns,
            collection: pixelEntities,
            showPagination: false,
            label: 'Tracking pixels',
            titlePosition: 'inside'
        });
        cardView.on(cardEvents);
        options.region.show(cardView);
        moduleChannel.vent.trigger('edit:card:loaded', {
            label: 'Pixels',
            collection: pixelEntities,
            uiSummaryLabel: 'pixels'
        });
    };

    var showForm = function() {
        var select2Options = {
            entityURl: App.request('advisor:pixel:Entities').prototype.url,
            filter: {
                'brand_id': initiativeEntity.get('brand_id'),
                'type': 'conversion'
            },
<<<<<<< HEAD
            formatName: AdvisorApp.Common.Language.en.getPixelNameHTML,
            collection: pixelEntities,
=======
            formatName: AdvisorApp.module('Common.Language').en.getPixelNameHTML,
>>>>>>> 4f7fdb6f59a6744915ae8be39bbd4d07b6f6cbca
            placeholder: 'Search for pixel by name'
        };
        var formView = new (moduleChannel.reqres.request('common:grid:edit:form:View'))({
            label: 'Pixel',
            title: 'Select Pixel',
            select2Options: select2Options
        });
        App.modalRegion.show(formView);
        formView.on(formEvents);
        formView.receivingView = this;
    };

    var cardEvents = {
        'show': function() {
            var tableView = new Backbone.SCDataTable.View(this.options);
            this.tableRegion.show(tableView);
            tableView.fetchCollection();
        },
        'show:form': showForm,
        'add': function(pixel) {
            this.addToTable(pixel);
        }
    };

    var formEvents = {
        'add': function(pixel) {
            this.receivingView.trigger('add', pixel);
            this.triggerMethod('modal:close');
        }
    };

    var setEdited = function() {
        isEdited = true;
        cardView.triggerMethod('error', messages.UNSAVED);
        return this;
    };

    var saveSuccess = function() {
        isEdited = false;
        cardView.triggerMethod('clearError');
    };

    var saveError = function() {
        cardView.triggerMethod('error', messages.SAVE_ERROR);
    };

    var save = function() {
        var patching;
        if (isEdited) {
            patching = initiativeEntity.patch({
                'pixels': _.pluck(pixelEntities.toJSON(), 'resource_uri')
            });
            patching.done(saveSuccess);
            patching.fail(saveError);
        }
    };

    App.module('InitiativeModule').on('start', function() {
        moduleChannel = this.moduleChannel;
        moduleChannel.commands.setHandlers({
            'pixels:card:load': loadCardView,
            'edit:save': save
        });
        moduleChannel.vent.on('edit:save:all', save);
    });

});
