/* global dependencies */
var _ = require('underscore');
var $ = require('jquery');
var Backbone = require('backbone');
var Marionette = require('backbone.marionette');
var Backgrid = require('backgrid');

var LoadingView = require('advisor/common/loading-view');
var LayoutTemplate = require('./templates/browser-base.hbs');

var BrowserBaseView = Marionette.LayoutView.extend({
    template: LayoutTemplate,
    regions: {
        'objectsRegion': 'div[data-region=objects]'
    },
    collectionEvents: {
        'browser:zoom': 'zoomObject',
        'sync reset': 'loaded',
    },
    events: {
        'click button.show-more': 'moreItems'
    },

    // Override for each level
    collectionClass: null,
    objectFilters: {},
    columns: [],

    // null for lower-most levels
    childViewClass: null,

    /* Shouldn't have to override */
    dateFormat: 'YYYY-MM-DD',

    collectionFilters: function() {
        var baseFilters = {
            'start_date': this.dateModel.get('start').format(this.dateFormat),
            'end_date': this.dateModel.get('end').format(this.dateFormat),
        };
        return _.extend(this.objectFilters(), baseFilters);
    },

    publishFilters: function() {
        AppChannel.trigger('url:clearParams', 'obj__');
        AppChannel.trigger('url:addParams', this.objectFilters(), 'obj__');
    },

    loading: function() {
        var loadingView = new LoadingView();
        this.objectsRegion.show(loadingView);
    },

    loaded: function() {
        this.objectsRegion.show(this.grid);
        this.updatePagination();
    },

    onShow: function() {
        this.loading();

        this.collection.fetch({
            url: this.collectionUrl,
            data: this.collectionFilters()
        });
    },

    zoomObject: function(model) {
        var childModel = new Backbone.Model(model.toJSON());
        var childView = new this.childViewClass({
            childModel: childModel,
            campaignModel: this.campaignModel,
            dateModel: this.dateModel
        });
        this.campaignModel.trigger('child:browse', childView);
    },

    initialize: function(options) {
        this.dateModel = options.dateModel;
        this.campaignModel = options.campaignModel;
        this.childModel = options.childModel || null;

        this.collection = new Backbone.Collection();

        this.delegateEvents();

        this.grid = new Backgrid.Grid({
            className: 'table backgrid sc-big-datagrid',
            columns: this.columns(),
            collection: this.collection,
            emptyText: 'No results'
        });
    },

    updatePagination: function() {
        if (this.collection.meta.next) {
            this.$('button.show-more').show().button('reset');
        } else {
            this.$('button.show-more').hide();
        }
    },

    moreItems: function() {
        // Split params off
        var query = this.collection.meta.next.split('?')[1];
        var fetchurl = this.collectionUrl + '?' + query;

        // Fetch with the updated url
        this.collection.fetch({
            url: fetchurl,
            remove: false
        });

        this.$('button.show-more').button('loading');
    },

    onDestroy: function() {
        this.grid.remove();
    }
});

module.exports = BrowserBaseView;
