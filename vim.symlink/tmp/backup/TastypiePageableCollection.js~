var _ = require('underscore');
var PageableCollection = require('backbone-pageable');

var TastypiePageableCollection = PageableCollection.extend({
    state: {
        firstPage: 0,
        pageSize: 20
    },

    queryParams: {
        pageSize: 'limit',
        currentPage: null,
        totalPages: null,
        totalRecords: null,
        offset: function() {
            return this.state.currentPage * this.state.pageSize;
        },
        order_by: function() {
            if (_.isNull(this.state.sortKey)) {
                return null;
            }

            if (this.state.order < 0) {
                return this.state.sortKey;
            }

            return '-' + this.state.sortKey;
        }
    },

    collectionFilters: {},
    resetFilters: function(filtersObj) {
        // remove all past filters and reset with fitersObj's none-empty values.
        this.queryParams = _(this.queryParams).omit(_.keys(this.collectionFilters));
        this.collectionFilters = {};

        if (!_.isEmpty(filtersObj)) {
            this.collectionFilters = _(filtersObj).omit(function(value) { return !value; });
            _.extend(this.queryParams, this.collectionFilters);
        }

        this.getFirstPage();
    },

    parseRecords: function(response) {
        return response.objects;
    },

    parseState: function(response, queryParams, state, options) {
        var newState    = _.clone(state);
        var serverState = response.meta;
        var limit       = serverState.limit;

        if (!_.isUndefined(serverState)) {
            _.chain(queryParams)
             .omit('directions')
             .each(function(value, key) {
                var serverVal = serverState[value];

                if (!_.isUndefined(serverVal) && !_.isNull(serverVal)) {
                    newState[key] = serverState[value];
                }
            });

            if (limit) {
                newState.currentPage  = serverState.offset / limit;
                newState.totalPages   = Math.ceil(serverState.total_count / limit);
            } else {
                newState.pageSize = 1;
            }

            newState.totalRecords = serverState.total_count;
        }

        return newState;
    },
    /** @param {Object} options */
    setCollectionFilter: function(options) {
        var newFilters = _.chain(this.queryParams)
                            .clone()
                            .omit(options.clear || [])
                            .extend(options.value)
                            .value();

        this.resetFilters(newFilters);
    }
});

module.exports = TastypiePageableCollection;
