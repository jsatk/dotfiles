var $ = require('jquery');
var _ = require('underscore');

var AppChannel = require('advisor/app-channel');

var urlUtils = {
    /**
     * getQuerystring - Returns the querystring portion of the current url
     * @memberof urlUtils
     *
     * @return {string} querystring from the current url of the app
     */
    getQuerystring: function() {
        var currentRoute = AppChannel.request('currentRoute');
        var uri = currentRoute.split('?');

        if (uri.length > 1) {
            return uri[1];
        }

        return '';
    },

    /**
     * getParams - Convert current URI params to object, optionally filtered by prefix
     * @memberof urlUtils
     *
     * @param  {string} [prefix] - optional, filter returned params by prefix
     * @return {object}          a hash of keys & values
     */
    getParams: function(prefix) {
        var query = this.getQuerystring();
        return this.deparam(query);
    },

    /**
     * deparam - Convert any querystring to object, optionally filtered by prefix
     * @memberof urlUtils
     *
     * @param  {string} query    - querystring key=value pairs joined by ampersands
     * @param  {string} [prefix] - optional, filter returned params by prefix
     * @return {object}          a hash of keys & values
     */
    deparam: function(query, prefix) {
        query = query ? query.split('&') : [];

        // In the case of filtered query params, keep a slice length to remove the prefix
        var prefixlen = prefix ? prefix.length : 0;

        var object = {};

        /* Split string to object */
        for (var index = 0; index < query.length; index++) {
            var arg = query[index].split('=');
            var field = arg[0];
            var value = arg[1];

            // Prefix is provided but not matched, skip this value
            if (prefix && !field.startsWith(prefix)) {
                continue;
            }

            object[field.slice(prefixlen)] = object[field] ? [].concat(object[field], value) : value;
        }

        /* Return object */
        return object;
    },

    /**
     * Add URI params
     * Passed an object, key/value pairs will be added to the current querystring.
     * Empty values for a given key will delete the key from the existing url params.
     * This will automatically update the page URL when called.
     * @memberof module:app
     *
     * @param {object} params   - key/value query parameters
     * @param {string} [prefix] - optional, prepend string to passed query params
     */
    addParams: function(params, prefix) {
        /* Variables */
        var currentRoute = AppChannel.request('currentRoute');
        var uri = currentRoute.split('?');
        var url = uri[0];
        var obj = {};

        /* Convert params to objects */
        if (uri.length > 1) {
            obj = this.getParams();
        }

        /* Set object */
        _.each(params, function(value, key) {
            // Prepend key if prefix is provided
            if (prefix) {
                key = prefix + key;
            }

            // Delete key if no value
            if (value) {
                obj[key] = value;
            } else {
                delete obj[key];
            }
        });

        /* Update url */
        var newUrl = url + '?' + decodeURIComponent($.param(obj)).replace(/\+/g, ' ');
        AppChannel.trigger('navigate', newUrl);
    },
    /**
     * Clear URI params
     * Removes either the entire querystring from the current url or, if passed a prefix,
     * removes all prefixed keys from the params and publishes an updated url.
     * This will automatically update the page URL when called, but does not create a history entry.
     * @memberof module:app
     *
     * @param {string} [prefix] - optional, only remove params that match this prefix
     */
    clearParams: function(prefix) {
        var currentRoute = AppChannel.request('currentRoute');
        var uri = currentRoute.split('?');
        var url = uri[0];

        // If no prefix, this is our new url
        var updatedUrl = url;

        // If a prefix exists, filter current params and tack them on
        if (prefix) {
            var params = this.getParams();
            var filtered = _.omit(params, function(value, key) {
                return key.startsWith(prefix);
            });

            // Only add back querystring if other non-matching params remain
            if (filtered.length > 0) {
                updatedUrl += '?' + decodeURIComponent($.param(filtered)).replace(/\+/g, ' ');
            }
        }

        // Navigate without creating a history entry, as this will
        // usually be followed by publishing updated params
        AppChannel.trigger('navigate', updatedUrl, { replace: true });
    }
};

AppChannel.on('url:getQuerystring', urlUtils.getQuerystring);
AppChannel.on('url:getParams', urlUtils.getParams);
AppChannel.on('url:deparam', urlUtils.deparam);
AppChannel.on('url:addParams', urlUtils.addParams);
AppChannel.on('url:clearParams', urlUtils.clearParams);
