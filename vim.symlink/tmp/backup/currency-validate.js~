/* global dependencies */
var Marionette = require('backbone.marionette');
var $ = require('jquery');
var accounting = require('accounting');

var CurrencyValidate = Marionette.Behavior.extend({
     events: {
        /**
         * Unformat string on focus
         * @param {$.Event} e from the focus event
         */
        'focus [data-currency]': function(e) {
            /** Variables */
            var target = e.currentTarget;
            var value  = $(target).val();
            /** Remove everything except numbers and decimal mark */
            var unformatted = accounting.unformat(value);
            /** Set value */
            $(target).val(unformatted || undefined);
        },
        /**
        * Format currency on blur
        * @param {$.Event} e from the blur event
        */
        'blur [data-currency]': function(e) {
            /** Variables */
            var target = e.currentTarget;
            var value  = $(target).val();
            /** Default currency options */
            var defaults = accounting.settings.currency;
            /** Updated currency options if data attribute is available */
            var targetData  = $(target).data();
            var updates = {
                symbol:    targetData['currency-symbol'],
                decimal:   targetData['currency-decimal'],
                thousand:  targetData['currency-thousand'],
                precision: targetData['currency-precision'],
                format:    targetData['currency-format']
            };
            /** Merged currency options */
            var options = $.extend({}, defaults, updates);
            // Is number
            var isNumber = value || (value === 0);
            /** Format value */
            var formatted = isNumber && accounting.formatMoney(value, options) || undefined;
            /** Set value */
            $(target).val(formatted);
        },
        /**
        * Only accept numbers and two decimal places
        * @param {$.Event} e from the keypress event
        */
        'keypress [data-numeric]': function(e) {
            /** Variables */
            var target = e.currentTarget;
            var value  = $(target).val();
            var keycode = e.keyCode || e.charCode;
            // If it's a backspace (8), allow it and move on.
            if (keycode === 8) {
                return;
            }
            var input  = String.fromCharCode(keycode);
            var index  = target.selectionStart;
            /** Updated string */
            var updated = value.substring(0, index) + input + value.substring(index);
            /** Expression */
            var expr    = new RegExp(/^(\d+)?(?:\.\d{0,2})?$/);
            var invalid = !expr.test(updated);
            /** Precent default */
            if (invalid) {
                e.preventDefault();
            }
        },
        /**
        * DEPRECATED
        *
        * @param {$.Event} e from the click event.
        * @returns {Boolean|Undefined}
        */
        'keyup .currency-sc': function(e) {
            var $target              = $(e.currentTarget);
            var value                = $target.val();
            var indexOfDecimal       = value.indexOf('.');
            var maxLengthWithDecimal = indexOfDecimal + 3;
            if (isNaN(value.replace(/,/g, ''))) {
                $target.val(accounting.formatNumber(value));
                return false;
            }
            if (indexOfDecimal > -1 && (value.length > maxLengthWithDecimal)) {
                $target.val(value.substring(0, maxLengthWithDecimal));
            }
        }
    }
});

module.exports = CurrencyValidate;
