/* global dependencies */
var Backbone = require('backbone');
var $ = require('jquery');
var _ = require('underscore');
var Handlebars = require('handlebars');
var Marionette = require('marionette');
var AdvisorApp = require('../../../../app');

/* local dependencies */
var CampaignModule = require('../helpers/children');
var AdCluster = require('../../../../entities/advisor/adcluster');

/* templates */
var ChildrenCardTemplate = require('../../templates/cards/ChildrenCard.hbs');

/* module definition */
var View = Marionette.LayoutView.extend({
    template: ChildrenCardTemplate,
    ui: {
        'search': '#children-search'
    },
    events: {
        'change @ui.search': 'search'
    },
    regions: {
        breadcrumbs: '.children-breadcrumbs',
        navBar:      '.sc-navbar',
        tableRegion: '.children'
    },
    initialize: function() {
        /** The logic for deciding what to show in the table lives here. */
        _(this).extend(CampaignModule.ObjectBrowser);
    },
    onShow: function() {
        $.when(
            this.setModelAndCollection()
        ).done(_(function() {
            this.initializeChildViews();
            this.tableRegion.show(this.childTable);
        }).bind(this));
    },
    search: function(event) {
        event.preventDefault();
        this.collection.setCollectionFilter({
            value: { name__icontains: event.currentTarget.value }
        });
    },
    setModelAndCollection: function() {
        /** If we already have a collection simply return. */
        if (this.collection instanceof Backbone.Collection) return;
        var defer = $.Deferred();
        var EntitiesStr;
        var Collection;
        switch (this.getOption('level')) {
            case 'ads':
            case 'adgroups':
                var adSetRequest = this.getOption('platform') === 'facebook' ? 'facebook:adset:entity' : 'twitter:campaign:entity';
                AdvisorApp.request(adSetRequest, this.getOption('lID')).done(_(function(adset) {
                EntitiesStr = this.getOption('platform') + ':adgroup:PageableEntities';
                Collection  = AdvisorApp.request(EntitiesStr, Number(adset.get('id')), this.model.userCanManage());
                this.collection = new Collection();
                if (this.getOption('level') === 'adgroups') this.model = adset; // TODO: OMG I'm so sorry. This is a hack.
                defer.resolve();
            }).bind(this));
                break;
            case 'adsets':
                switch (this.getOption('platform')) {
                    case 'facebook':
                        EntitiesStr = 'facebook:adset:PageableEntities';
                        break;
                    case 'twitter':
                        EntitiesStr = 'twitter:campaign:PageableEntities';
                        break;
                    case 'pinterest':
                        EntitiesStr = 'pinterest:campaign:PageableEntities';
                        break;
                }
                /** This request doesn't return a Promise but returns a class so no need for a $.when or $.done. */
                Collection  = AdvisorApp.request(EntitiesStr, null, this.model.userCanManage());
                this.collection = new Collection();
                defer.resolve();
                break;
            case 'audiences':
                AdvisorApp.request('audience:entities', { data: { campaign_id: this.model.get('id') } }).done(_(function(audiences) {
                    this.collection = audiences;
                    defer.resolve();
                }).bind(this));
                break;
            case 'promotedaccounts':
                /** This request doesn't return a Promise but returns a class so no need for a $.when or $.done. */
                Collection  = AdvisorApp.request('twitter:promotedaccount:PageableEntities', this.model.userCanManage());
                this.collection = new Collection();
                defer.resolve();
                break;
            case 'promotedtweets':
                /** This request doesn't return a Promise but returns a class so no need for a $.when or $.done. */
                Collection = AdvisorApp.request('twitter:promotedtweet:PageableEntities', this.model.userCanManage());
                this.collection = new Collection();
                defer.resolve();
                break;
            case 'adclusters':
                Collection = AdCluster.PageableEntities;
                this.collection = new Collection();
                defer.resolve();
                break;
            default:
                throw new Error('You are at a non-supported level.');
        }
        return defer;
    },
    initializeChildViews: function() {
        this.childTable = new Backbone.SCDataTable.View(this.getChildTableOptions());
        this.childTable.fetchCollection();
    },
    /** @returns {Object} of variables we want accessible in our Handlebar Template. */
    templateHelpers: function() {
        /** Get options */
        var initiative = this.getOption('initiative');
        var level      = this.getOption('level');
        /** Get IDs */
        var iID = initiative.get('id');
        var cID = this.model.get('id');
        /** Return options */
        return {
            'states': this.getAvailableStates(iID),
            'uri':    this.getURI(iID, cID)
        };
    },
    /** @returns {String} */
    getURI: function(iID, cID) {
        return '#initiative/' + iID + '/campaign/' + cID + '/';
    },
    /** @returns {Boolean} */
    getPermission: function(iID) {
        /**
        * We don't want to hardcode this.
        * We need to get these ids returned from the server.
        */
        /** Check if id is whitelisted */
        return _([8786]).contains(iID);
    },
    /** @returns {Object} */
    getAvailableStates: function(iID) {
        /** Get options */
        var platform   = this.model.getEffectivePlatform();
        var level      = this.getOption('level');
        /** Get user permission */
        var permission = this.getPermission(iID);
        /** Get platform states */
        var states = this.getPlatformStates(platform, permission);
        /** Set active state to true */
        return (states[level] = true) && states || level;
    },
    /** @returns {Object} */
    getPlatformStates: function(platform, permission) {
        var states = {};
        var level  = this.getOption('level');
        /** Return available */
        switch (platform) {
            case 'facebook':
                states = {
                    adclusters: false, adclustersText: 'ad clusters',
                    adsets: false, adsetsText: 'ad sets',
                    ads: false, adsText: 'ads',
                    creatives: false, creativesText: 'page posts'
                };
                break;
            case 'twitter':
                states = {
                    adsets: false, adsetsText: 'campaigns',
                    ads: false, adsText: 'line items'
                };
                break;
            case 'instagram':
                states = {
                    adsets: false, adsetsText: 'ad sets',
                    ads: false, adsText: 'ads'
                };
                break;
            case 'pinterest':
                states = {
                    adsets: false, adsetsText: 'campaigns'
                };
                break;
        }
        states[level] = true;
        states.showNavs = _.contains(['adclusters', 'adsets', 'ads', 'creatives'], level);
        /** Add audiences if user has permission */
        return (permission ? states.audiences = false : null, states);
    }
});

module.exports = View;
