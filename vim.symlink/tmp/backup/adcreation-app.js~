/* global dependencies */
var Marionette = require('backbone.marionette');
var _ = require('underscore');
var moment = require('moment');
var Backbone = require('backbone');
var $ = require('jquery');
var AppChannel = require('advisor/app-channel');

/* local dependencies */
var AdCreationChannel = require('./adcreation-channel');
var LoadingView = require('advisor/common/loading-view');
var BulkController = require('advisor/common/bulk/controller');
var PreCreationView = require('./pre-creation/view');
var ReviewView = require('./review/view');
var Router = require('./router');

var AdCreationController = require('./common/controller');
var CreativeCreationController = require('../creative/creation/controller');
var CreativeController = require('./creative/controller');
var DemographicController = require('./demographic/controller');
var ContainerController = require('./container/controller');
var CreationController = require('./creation/controller');
var TargetingController = require('./targeting/controller');
var NavigationController = require('./navigation/controller');
var BudgetController = require('./budget/controller');

var record = require('./record');

/** @namespace  AdCreationApp */
/* module definition */
var Module = Marionette.Object.extend({
    initialize: function(options) {
        /** Create router */
        this.router = new Router({
            controller: this
        });

        AdCreationChannel.reply('totals', this.getTotals);

        AppChannel.on('adcreation:bulk_modal:show', _.bind(this.showBulkModal, this));
        AppChannel.on('adcreation:modal:show', _.bind(this.showModal, this));
        AppChannel.on('adcreation:form:show', _.bind(this.showForm, this));
        AppChannel.on('adcreation:initial:show', _.bind(this.showInitial, this));
        AppChannel.on('adcreation:review:show', _.bind(this.showReview, this));
        AppChannel.on('adcreation:container:show', _.bind(this.showContainer, this));
        AppChannel.on('adcreation:navigation:show', _.bind(this.showNavigation, this));
        AppChannel.on('adcreation:creative:show', _.bind(this.showCreative, this));
        AppChannel.on('adcreation:demographic:show', _.bind(this.showDemographic, this));
        AppChannel.on('adcreation:targeting:show', _.bind(this.showTargeting, this));
        AppChannel.on('adcreation:upload:show', _.bind(this.showUpload, this));
        AppChannel.on('adcreation:budget:show', _.bind(this.showBudget, this));
        AppChannel.on('adcreation:launch:show', _.bind(this.showLaunch, this));
        AppChannel.on('adcreation:creation:show', _.bind(this.showCreation, this));
        AppChannel.on('adcreation:creative:create:show', _.bind(this.showCreateCreative, this));
        AppChannel.on('adcreation:toolbar:show', _.bind(this.showToolbar, this));
        AppChannel.on('adcreation:disable', channel.disable);
        AppChannel.on('adcreation:enable', channel.enable);
    },
    permission: function(campaign) {
        /** Variables */
        var session = 'session:grant:entities:can_manage_brand_or_initiative';
        var brandId = campaign.get('brand_id');
        var initiativeId = campaign.get('initiative_id');
        /** Return */
        return AppChannel.request(session, brandId, initiativeId);
    },

    loadAdCluster: function(iID, cID, aID) {

        /** Entities */
        var iEntity = AppChannel.request('advisor:initiative:entity', iID);
        var cEntity = AppChannel.request('advisor:campaign:entity', cID);

        $.when(iEntity, cEntity).done(function(initiative, campaign) {

            /** Create AdCreation controller */
            var controller = new AdCreationController();

            /** Clear record */
            record(null);

            /** Set record */
            record('initiative', initiative);
            record('initiative:id', iID);

            record('campaign', campaign);
            record('campaign:id', cID);

            $.ajax({
                url: '/api/advisor/v1/adcluster/' + aID
            }).done(function(model) {

                /** Trigger adcreation */
                AppChannel.trigger('adcreation:form:show', model);

                /**
                 * Add resource_uri
                 * Resource URI is missing from the response so we need to add it manually.
                 * This should be included in the
                 */
                model.resource_uri = '/api/advisor/v1/adcluster/' + aID + '/';

                /** Make collection */
                var adcollections = record('collection:adcollections');
                adcollections.make(null, model);

            });

        });
    },

    showBulkModal: function(options) {

        /** Create custom bulk upload loading view */
        var BulkUploadLoading = LoadingView.extend({

            modalConfigurations: {
                title: 'New ads',
                size: 'modal-sm'
            }

        });

        var modalRegion = options.region || AppChannel.request('modalRegion');
        var cID         = options.cID;
        var adSetName   = options.adSetName;

        /** Create loading view */
        var bulkUploadLoading = new BulkUploadLoading();

        /** Add loading view to modal region */
        modalRegion.show(bulkUploadLoading);

        /** Fetch the entities */
        var campaignEntity = AppChannel.request('advisor:campaign:entity', cID);

        /** Resolve promise */
        $.when(campaignEntity).done(function(campaign) {

            var bulkController = new BulkController({
                region: modalRegion,
                campaign: campaign,
                type: 'ads',

                settings: {
                    template:   campaign.get('resource_uri') + '/sample_bulk_sheet/',
                    action:     '/api/advisor/v1/adcluster/upload_bulk_adcollections/',
                    data:       {
                        adSetName: adSetName
                    }
                }
            });

        });

    },
    showModal: function(iID, cID) {
        var modalRegion = AppChannel.request('modalRegion');
        /** Update the URL */
        AppChannel.trigger('navigate', '/initiative/' + iID + '/campaign/' + cID + '/adgen/');
        /** Clear the module record */
        record(null);
        /** Show loading gif */
        modalRegion.show(new LoadingView());
        /** Store IDs on Module's record */
        record('initiative:id', iID);
        record('campaign:id', cID);
        /** Fetch the entities */
        $.when(
            AppChannel.request('advisor:initiative:entity', iID),
            AppChannel.request('advisor:campaign:entity', cID)
        ).done(function(initiative, campaign) {
            /** Store entities on Module's record */
            record('initiative', initiative);
            record('campaign', campaign);
            var startDate = moment.utc(campaign.get('start_date')).format('MM/DD/YYYY');
            var endDate = moment.utc(campaign.get('end_date')).format('MM/DD/YYYY');
            var model = new Backbone.Model({
                endDate: endDate,
                startDate: startDate
            });
            var view = new PreCreationView({
                model: model
            });
            modalRegion.show(view);
        });
    },
    showForm: function(attributes) {
        /** Common controller */
        var controller = new AdCreationController();
        var campaign = record('campaign');
        /** Trigger permission denied if use lacks privilege */
        if (!this.permission(campaign)) {
            return AppChannel.trigger('permissionDenied');
        }
        /** Add preloader view */
        var preloader = new LoadingView();
        var region = controller.region.main();
        region.show(preloader);
        controller.model(campaign.get('resource_uri'));
        /** Register module listeners */
        _({
            'controller': controller,
            'account': campaign.getPlatformAccountId(),
            'channel': channel,
            'channel:upload': channel.upload,
            'channel:launch': channel.launch
        }).each(function(val, key) {
            record(key, val);
        });
        /** Set the appropriate attributes on the adcluster model. */
        record('model:adcluster').set(attributes);

        /** Kick off initial view */
        AppChannel.trigger('adcreation:initial:show');
    },
    /**
     * This is useful if you ever want show a view from a different
     * module (like creative creation) and then come back
     * to the adgen process.
     *
     * Could be useful to make this even more flexible so you could
     * come back to any specific view and just render the container
     * and navigation. For now, just going to bring the user back to
     * the initial creative selection screen.
     */
    showInitial: function() {
        AppChannel.trigger([
            'adcreation:container:show',
            'adcreation:navigation:show',
            'adcreation:creative:show'
        ].join(' '));
    },
    /** @returns {object} */
    getTotals: function() {
        var adcollections = record('collection:adcollections');
        var adcluster = record('model:adcluster');
        var creatives = adcluster.get('ad_creatives');
        return {
            ads: adcollections.length * creatives.length,
            adsets: adcollections.length
        };
    },
    showContainer: function() {
        /** Controllers */
        var Controller = record('controller');
        /** Container view */
        var container = new ContainerController({
            region: Controller.region.main()
        });
    },
    hideContainer: function() {
        /** Controllers */
        var Controller = record('controller');
        Controller.region.main().empty();
    },
    hideNavigation: function() {
        /** Controllers */
        var Controller = record('controller');
        /** Remove the view from the region */
        Controller.region.navigation().empty();
    },
    showNavigation: function() {
        /** Controllers */
        var Controller = record('controller');
        /** Navigation view */
        var navigation = new NavigationController({
            region: Controller.region.navigation()
        });
    },
    /** @returns {Boolean} */
    hasEntities: function() {
        return !!(record('initiative') && record('campaign'));
    },
    showCreative: function() {
        this.showController('creative', CreativeController);
    },
    showCreateCreative: function(options) {
        /** Hide current adgen views */
        this.hideNavigation();
        this.hideContainer();
        /** Controllers */
        var Controller = record('controller');
        var campaign = record('campaign');
        /** CreateCreative view */
        var createCreative = new CreativeCreationController(_.extend(options, {
            campaign: record('campaign'),
            initiative: record('initiative'),
            selectedAsset: record('creatives:asset:selected')
        }));
        Controller.uri('create-creative');
    },
    showDemographic: function() {
        this.showController('demographic', DemographicController);
    },
    showTargeting: function() {
        AppChannel.trigger('notReadyToSave');
        var options = {
            initiative: record('initiative')
        };
        this.showController('targeting', TargetingController, options);
    },
    showUpload: function() {
        /** Trigger upload */
        record('channel:upload').save();
    },
    showBudget: function() {
        /**
         * Inserts the totals into the navigation sidebar. I know this is a bit hacky, but
         * currently there is no good clean way to insert here without simply using jQuery.
         */
        var totals = this.getTotals();
        $('.total-ad-sets').text(totals.adsets);
        $('.total-ads').text(totals.ads);
        this.showController('budget', BudgetController);
    },
    showLaunch: function() {
        /** Trigger upload */
        record('channel:launch').save();
    },
    showCreation: function() {
        this.showController('creation', CreationController);
    },
    /**
     *  @param {string} name
     *  @param {Marionette.Object} ViewController
     *  @param {Object=} options
     */
    showController: function(name, ViewController, options) {
        /** Controllers */
        var Controller = record('controller');
        /** View */
        var view = new ViewController(_.extend({
            region: Controller.region.content()
        }, options));
        /** Settings */
        Controller.scene(name);
        Controller.uri(name);
    },
    showReview: function() {
        var review = new ReviewView({
            collection: record('collection:adcollections')
        });
        record('review', review);
        AppChannel.request('modalRegion').show(review);
    },
    showToolbar: function(options) {
        /** Campaign and initiative */
        var campaign = record('campaign');
        var initiative = record('initiative');
        /** Extend default navigation with custom options */
        var navigation = _.extend(options, {
            showNavToolbar: true,
            subNavs: [{
                platform: campaign.getPlatform(),
                iName: initiative.get('name'),
                cName: campaign.get('name')
            }]
        });
        /** Trigger navigation */
        AppChannel.trigger('header:toolbar:show', navigation);
    }
});

var channel = {
    upload: {
        save: function() {
            /** Disable view */
            AppChannel.trigger('adcreation:disable');
            /** Trigger save */
            record('controller').scene('upload-save');
            record('model:adcluster').make();
            /** Analytics */
            AppChannel.trigger('usage:pageevent', 'Ad Creation', 'Uploaded');
        },
        success: function() {
            /** Triger success and show budget view */
            AppChannel.trigger('adcreation:enable');
            AppChannel.trigger('adcreation:budget:show');
        },
        failure: function() {
            /** Trigger failure */
            record('controller').scene('upload-failure');
            AppChannel.trigger('adcreation:enable');
        }
    },
    launch: {
        save: function() {
            /** Disable view */
            AppChannel.trigger('adcreation:disable');
            /** Trigger save */
            record('controller').scene('launch-save');
            record('collection:adcollections').launch();
            /** Analytics */
            AppChannel.trigger('usage:pageevent', 'Ad Creation', 'Launched');
        },
        success: function() {
            /** Trigger success */
            record('controller').scene('launch-success');
        },
        failure: function() {
            /** Trigger failure */
            record('controller').scene('launch-failure');
            AppChannel.trigger('adcreation:enable');
        }
    },
    message: function(message) {
        record('model:generic').set('message', message);
    },
    disable: function() {
        /** Region */
        var content = record('controller').region.main();
        /** Add disabled class to module view */
        $('.sc-adcreation', content.el).addClass('disabled');
    },
    enable: function() {
        /** Region */
        var content = record('controller').region.main();
        /** Remove disabled class from module view */
        $('.sc-adcreation', content.el).removeClass('disabled');
    }
};

module.exports = Module;
