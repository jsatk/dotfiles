/* global dependencies */
var _ = require('underscore');
var $ = require('jquery');
var Backbone = require('backbone');
var React = require('react');
var AppChannel = require('advisor/app-channel');

/* local dependencies */
var AudienceProfilerChannel = require('./audience-profiler-channel');
var HomeView = require('./components/home-view.jsx');

/* module definition */
var HomeController = {};

var AccountsCollection = AppChannel.request('Accounts');
var PageCollection = AppChannel.request('Pages');
var TwitterAudienceCollection = AppChannel.request('TwitterAudiences');
var TwitterUserCollection = AppChannel.request('TwitterUsers');
var CustomAudienceCollection = AppChannel.request('CustomAudiences');

AppChannel.reply('jsonToCollections', function(json) {
    var Account = new AccountsCollection().model;
    return _.extend(getConnectionsCollections(json), {
        account: new Account(json.account)
    });
});

AppChannel.reply('stateForNewAccount', function(account) {
    // account should be a backbone model, so wrap it if needed
    if (!(account instanceof Backbone.Model)) {
        var Account = new AccountsCollection().model;
        account = new Account(account);
    }
    return {
        selected: {
            account: account,
            base_audience: getAudienceSpecCollections(),
            targeting_audience: getAudienceSpecCollections()
        },
        showChart: false
    };
});

AppChannel.reply('targetingDict', function() {
    return targetingDict;
});

var targetingDict = {
    'adeducationschool': {
        replacement: 'education_schools',
        label: 'School'
    },
    'adeducationmajor': {
        replacement: 'education_majors',
        label: 'Major'
    },
    'adinterest': {
        replacement: 'interests',
        label: 'Interest'
    },
    'adlocale': {
        replacement: 'locales',
        label: 'Locale'
    },
    'adworkemployer': {
        replacement: 'work_employers',
        label: 'Employer'
    },
    'adworkposition': {
        replacement: 'work_positions',
        label: 'Work Position'
    }
};
var pluckFields = function(arr, fields) {
    return _.map(arr, function(item) {
        return _.pick(item, fields);
    });
};
var getJsonForAudience = function(audience) {
    var targetingDict = AppChannel.request('targetingDict');
    return _.reduce(audience, function(dict, val, key) {
        var items = pluckFields(val.toJSON(), ['id', 'name']);
        if (items.length > 0) {
            var obj = targetingDict[key];
            if (obj) { key = obj.replacement; }
            dict[key] = items;
        }
        return dict;
    }, {});
};
var getConnectionsJson = function(selected) {
    return _.reduce(['base_audience', 'targeting_audience'], function(connections, type) {
        connections[type] = getJsonForAudience(selected[type]);
        return connections;
    }, {});
};
AppChannel.reply('collectionsToJson', function(selected) {
    return _.extend(getConnectionsJson(selected), {
        account: _.pick(selected.account.toJSON(), ['id', 'account_id', 'name'])
    });
});
var getAudienceProfileParams = function(selected, platform) {
    var params = {};

    switch (platform) {
        case 'facebook':
            params.baseURL = '/api/facebook/analytics/v1/facebookaudience/audience-profiles/';
            params.body = JSON.stringify(AppChannel.request('collectionsToJson', selected));

            break;
        case 'twitter':
            params.baseURL = '/api/twitter/v1/twitteraudience/audience-profiles/';
            if (selected.targeting_audience.twitter_users.length) {
                var tuserID = selected.targeting_audience.twitter_users.models[0].id;
                params.targeting_audience = '{"similar_to_followers_of_users": "' + tuserID + '"}';
                params.targeting_audience_id = tuserID;

                params.account_id = selected.account.id;
                params.user_id = tuserID;
            }
            break;
    }
    return params;
};
var getAudienceSpecCollections = function(audience) {
    return _.chain(targetingDict)
        .reduce(function(dict, obj, type) {
            dict[type] = new Backbone.Collection(audience ? audience[type] : []);
            return dict;
        }, {})
        .extend({
            custom_audiences: new CustomAudienceCollection(audience ? audience.custom_audiences : []),
            pages: new PageCollection(audience ? audience.pages : []),
            twitter_audiences: new TwitterAudienceCollection(audience ? audience.pages : []),
            twitter_users: new TwitterUserCollection(audience ? audience.pages : [])
        })
        .value();
};

AppChannel.reply('audienceProfileParams', getAudienceProfileParams);

var getConnectionsCollections = function(json) {
    return _.reduce(['base_audience', 'targeting_audience'], function(connections, type) {
        connections[type] = getAudienceSpecCollections(json[type]);
        return connections;
    }, {});
};

HomeController.loadView = function(options) {
    options = options || {};
    var region = options.region;
    if (!region) throw new Error('Audience Home Controller requires a region option.');

    // override backbone history, don't reload when changing the audience profiler state
    var backboneLoad = Backbone.History.prototype.loadUrl;
    var ignorePattern = /^#audience-profiler/i;
    Backbone.History.prototype.loadUrl = function() {
        if (!ignorePattern.test(window.location.hash)) {
            return backboneLoad.apply(this, arguments);
        }
    };
    // load our home view
    var props = { id: options.id, AppChannel: AppChannel };
    React.render(<HomeView {...props}/>, $(region.el)[0]);
};

module.exports = HomeController;
