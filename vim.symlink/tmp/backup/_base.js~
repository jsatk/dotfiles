// NOTE: Due to the way Marionette's module system works (or doesn't) we have to throw
// an _ in front of the name of this file to ensure it is concatonated above the rest.
AdvisorApp.module('Entities.Facebook.Base', function(Base, AdvisorApp) {

    /**
     * Model and Collection definitions.
     */

    // NOTE: Never create an instance of this model. Use for extending only.
    Base.Model = Backbone.Model.extend({
        /**
         * @returns {String} The parent lineItems status.
         */
        getLineItemStatus: function() {
            // NOTE: lineitem is defined on a model-by-model basis.
            return this.lineitem.get('status').toLowerCase();
        },
        /**
         * @param {Array.<String>} List of columns that are editable on this model.
         * @returns {Array}
         */
        getEditableCells: function(columns) {
            // You can't edit anything.
            if (this.lineitem && this.getLineItemStatus() === 'deleted') {
                return [];
            }

            // You can only edit the name.
            if (this.getStatus() === 'archived') {
                return ['name'];
            }

            // You can edit everything except the name.
            return _(columns).without('name');
        },
        /**
         * @returns {Array.<String>}
         */
        displayName: function() {
            var splitName = this.get('name').split('--');
            return splitName[splitName.length - 1];
        }
    });

    // NOTE: Never create an instance of this collection. Use for extending only.
    Base.Collection = Backbone.Collection.extend({
        /** @param {Object} options */
        initialize: function(options) {
            this.filters = options.query;
        }
    });

    /**
     * Get Entit(y/ies) methods
     */

    /**
     * @param {Number} id
     * @param {Backbone.Model} Model
     * @returns {$.promise}
     */
    Base.getBaseEntity = function(id, Model) {
        var defer = $.Deferred();
        var model = new Model({ id: id });

        model.fetch({
            success: function(model) {
                defer.resolve(model);
            },
            error: function(collection, response) {
                defer.reject(response);
            }
        });

        return defer.promise();
    };

    /**
     * @param {Object} options
     * @param {Backbone.Collection} Collection
     * @returns {$.promise}
     */
    Base.getBaseEntities = function(options, Collection) {
        var defer      = $.Deferred();
        var collection = new Collection(options);

        collection.fetch({
            data: this.filters,
            success: function(collection) {
                defer.resolve(collection);
            },
            error: function(collection, response) {
                defer.reject(response);
            }
        });

        return defer.promise();
    };

    /**
     * @param {Backbone.Model} Model
     * @param {Backbone.Model} lineitem
     * @param {Array.<Object>} statusChoices
     * @param {Boolean} userCanManage
     * @returns {Backbone.TastypiePageableCollection}
     */
    Base.getPageableBaseEntities = function(Model, lineitem, statusChoices, userCanManage) {
        var url = Model.prototype.urlRoot + 'dashboard/';

        return Backbone.TastypiePageableCollection.extend({
            model: Model.extend({
                lineitem: lineitem,
                userCanManage: userCanManage || false,
                urlRoot: url
            }),
            url: url,
            STATUS_CHOICES: statusChoices
        });
    };
});
