/* global dependencies */
var $ = require('jquery');
var Backbone = require('backbone');
var _ = require('underscore');
var React = require('react');
var AppChannel = require('advisor/app-channel');

/* local dependencies */
var BackboneModelView = require('../../../common/react/modelView.jsx');
var TypeaheadFormView = require('./typeahead-form.jsx');
var SelectFormView = require('./select-form.jsx');
var Gallery = require('./gallery.jsx');
var FBTargetingSearch = require('./fb-targeting-search.jsx');
var TypeaheadFormView = require('./typeahead-form.jsx');
var SelectFormView = require('./select-form.jsx');
var BackboneModelView = require('../../../common/react/modelView.jsx');

var AccountsCollection;
var PageCollection;
var CustomAudienceCollection;
var AudienceProfileCollection;

var TargetingPanelView = React.createClass({
    getInitialState: function() {
        AccountsCollection = AppChannel.request('Accounts');
        PageCollection = AppChannel.request('Pages');
        CustomAudienceCollection = AppChannel.request('CustomAudiences');
        AudienceProfileCollection = AppChannel.request('AudienceProfiles');
        return {
            gallery: 'pages',
            platformOptions: {
                facebook: {
                    account: {
                        url: '/api/facebook/analytics/v1/adaccount/',
                        baseParams: {pages__isnull: false},
                        manualRegex: /(act_\d+)/
                    },
                    pages: function(account) {
                        return {
                            account: account,
                            fetchParams: {accounts: 'act_' + account.account_id},
                            platform: 'facebook',
                            entity: 'pages',
                            label: 'Facebook Pages',
                            keypath: 'targeting_audience.pages'
                        }
                    },
                    custom_audiences: function(account) {
                        return {
                            account: account,
                            fetchParams: {account_id: account.account_id},
                            entity: 'customAudiences',
                            label: 'Custom Audiences',
                            keypath: 'targeting_audience.custom_audiences'
                        }
                    },
                    buttonLabels: {
                        pages: 'Facebook Pages',
                        custom_audiences: 'CustomAudiences'
                    }
                },
                twitter: {
                    account: {
                        url: '/api/twitter/v1/twitteraccount/',
                        baseParams: {users__id__isnull: false}
                    },
                    pages: function(account) {
                        return {
                            account: account,
                            fetchParams: {id__in: _.map(account.users, function(userData) {return userData.match('/api/twitter/v1/twitteruser/([0-9]+)/')[1]}).join(',')},
                            platform: 'twitter',
                            entity: 'twitterUsers',
                            label: 'Twitter Handles',
                            keypath: 'targeting_audience.twitter_users'
                        }
                    },
                    custom_audiences: function(account) {
                        return {
                            account: account,
                            fetchParams: {account_id: account.id,
                                user_id: account.users[0].match('/api/twitter/v1/twitteruser/([0-9]+)/')[1]},
                            platform: 'twitter',
                            entity: 'twitterAudiences',
                            label: 'Audiences',
                            keypath: 'targeting_audience.twitter_audiences'
                        }
                    },
                    buttonLabels: {
                        pages: 'Handle Audiences',
                        custom_audiences: 'Tailored Audiences'
                    }
                }
            }
        };
    },
    changeAccount: function(account) {
        AppChannel.trigger('change-account', account);
    },
    addItem: function(keypath, item) {
        AppChannel.trigger('added-item', {
            keypath: keypath,
            item: item
        });
    },
    removeItem: function(keypath, item) {
        AppChannel.trigger('removed-item', {
            keypath: keypath,
            item: item
        });
    },
    download: function() {
        AppChannel.trigger('download')
    },
    showChart: function() {
        AppChannel.trigger('show-chart');
    },
    nameChanged: function(event) {
        AppChannel.trigger('name-changed', event.target.value);
    },
    createProfiles: function() {
        AppChannel.trigger('create-profiles');
    },
    getPlatformOptions: function() {
        return this.state.platformOptions[this.props.platform];
    },
    getSpecSelect: function(targetingDict, selected, type) {
        return _.map(targetingDict, function(data, targeting_type) {
            var specCollection = selected[type][targeting_type];
            var keypath = [type, targeting_type].join('.');
            var SpecTypeahead = new BackboneModelView(FBTargetingSearch, new Backbone.Collection(), true);
            var specProps = {
                items: specCollection.toJSON(),
                onAdd: _.bind(this.addItem, this, keypath),
                onRemove: _.bind(this.addItem, this, keypath),
                name: data.label,
                manualRegex: /(\d+)/,
                targeting_type: targeting_type,
                readOnly: this.props.readOnly
            };
            return <SpecTypeahead {...specProps}/>;
        }, this);
    },
    getAccountSelect: function(account) {
        var AccountTypeahead = BackboneModelView(TypeaheadFormView, new AccountsCollection());
        var self = this;
        var accountProps = _.extend(self.getPlatformOptions().account, {
            filter: self.filterAccount,
            onAdd: self.changeAccount,
            name: 'Account',
            val: account ? account.get('id') : null,
            readOnly: self.props.readOnly
        });
        return <AccountTypeahead {...accountProps}/>;
    },
    getPages: function(account) {
        return <Gallery {...this.getPlatformOptions().pages(account)} />
    },
    getCustomAudiences: function(account) {
        return <Gallery {...this.getPlatformOptions().custom_audiences(account)} />
    },
    getDownloadUrl: function(selected) {
        var params = {format: 'excel'};
        _.extend(params, AppChannel.request('audienceProfileParams', selected, this.props.platform));
        return new AudienceProfileCollection(null, params).url();
    },
    cloneTemplate: function() {
        AppChannel.trigger('clone-template');
    },
    getGallery: function(account) {
        switch (this.state.gallery) {
            case 'pages': return this.getPages(account);
            case 'custom_audiences': return this.getCustomAudiences(account);
        }
    },

    getButtonClass: function(buttonGallery) {
        return this.state.gallery === buttonGallery ? 'active' : '';
    },

    getButtons: function() {
        var buttons = _.map(this.getPlatformOptions().buttonLabels, function(value, key) {
            return (
                <button
                    type='button'
                    className={'btn btn-gallery-selection ' + this.getButtonClass(key)}
                    onClick={this.selectedGallery.bind(this, key)}>
                    {value}
                </button>
            );
        }, this);
        return (
            <div className='col-xs-12 btn-group' role='group'>
                {buttons}
            </div>
        );
    },
    render: function() {
        var AppChannel = this.AppChannel;
        var selected = this.props.selected;
        var account = selected.account;
        var header, accountSelect, buttons, gallery, pages, customAudiences, baseAudienceHeader, targetingAudienceHeader, baseCustomAudienceSelect, basePageSelect, baseSpecSelect, targetingCustomAudienceSelect, targetingPageSelect, targetingSpecSelect, chartButton, downloadButton, createPanel, cloneButton, clearLink;
        accountSelect = this.getAccountSelect(account);
        if (account) {
            baseAudienceHeader = <h3>Base Audience</h3>,
            targetingAudienceHeader = <h3>Targeting Audience</h3>,
             targetingDict = AppChannel.request('targetingDict');
            baseSpecSelect = this.getSpecSelect(targetingDict, selected, 'base_audience');
            targetingSpecSelect = this.getSpecSelect(targetingDict, selected, 'targeting_audience');
            buttons = this.getButtons();
            gallery = this.getGallery(account.toJSON());
        }
        if (account && !(_.isEmpty(selected.pages) && _.isEmpty(selected.targeting_audiences) && _.isEmpty(selected.base_audience))) {
            downloadButton = (
                <div className='row'>
                    <button type="submit" className="btn btn-default submit-button" >
                        <a href={this.getDownloadUrl(selected)}>Download</a>
                    </button>
                </div>
            );
            if (!this.props.showChart) {
                chartButton = (
                <div className='row'>
                    <button type="submit" className="btn btn-default submit-button" onClick={this.showChart}>Show Chart</button>
                </div>
                );
            }
            if (!this.props.readOnly) {
                var disabled = this.props.profileName === '' ? 'disabled' : '';
                createPanel = (
                    <div className='row'>
                        <div className='pull-right'>
                        <div className='form-group'>
                            <input type='text' placeholder='Name (required)' value={this.props.profileName} onChange={this.nameChanged} disabled={this.props.readOnly}/>
                        </div>
                        <button type="submit" className="btn btn-default" onClick={this.createProfiles} disabled={disabled}>Create Profile</button>
                        </div>
                    </div>
                );
            }
            if (this.props.readOnly) {
                cloneButton = <div className='row'>
                    <button type="submit" className="btn btn-default submit-button" onClick={this.cloneTemplate}>Clone Template</button>
                </div>
            }
        }
        if (this.props.profileName.length > 0) {
            header = (
                <div className='row'>
                    <div className='col-xs-6'>
                        <h1>{this.props.profileName}</h1>
                    </div>
                </div>
            );
        }
        return (
           <div className='panel panel-sc profile-selects'>
               {clearLink}
               {header}
               <div className='row'>
                    {accountSelect}
               </div>
               {buttons}
               <div className='row'>
                    {gallery}
               </div>
               {downloadButton}
               {chartButton}
           </div>
       );
    },
    selectedGallery: function(entity) {
        this.setState({
            gallery: entity
        });
    }
});

module.exports = TargetingPanelView;
