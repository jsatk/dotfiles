# Notes on Matis' diff

## conversiontag.js

* No need for `modelName`
* No need for idAttribute if itâ€™s just going to be the default of `id`
* This is odd:
    ```javascript
    urlRoot: function() {
        if (this.models && this.models[0] && this.models[0].get('campaign')) {
            this.campaign = this.models[0].get('campaign');
        }
        return '/api/advisor/v1/campaign/' + this.campaign.get('id') + '/pixels/';
    }
    ```
    I'd recommend just using something like this:
    ```javascript
    urlRoot: function() {
        return '/api/advisor/v1/campaign/' + this.campaignId + '/pixels/';
    }
    ```
    and setting the campaignId on the collection directly.  When you're in `urlRoot` on a model and it's being used as part of a collection `this` is the collection, not the model.  It appears you understand that from your use of `this.models` but I figured I'd point it out just in case.
* No need to wrap object keys in quotes to turn them into strings unless you're using unsupported characters like a space or something.  I have no idea why we are doing this everywhere.

## new-conversion-tag-view.js

* Odd that entity is `conversiontag` but view is `conversion-tag`.  Pick one!
* No need to wrap a Marionette view's ui elements in a jQuery wrapper.  They are already jQuery objects.
* If preloader is going to be a common or shared method we should make it part of a base class.  Looks like two views are using it now.
* No reason for `var self` for use in `success` & `error` callbacks on backbone save. You can pass `context: this` as an option and it will bind all methods to this :)
* This:

    ```javascript
        conversionTagView.collection.fetch().done(function() {
            conversionTagView.render();
        });
    ```

    can be re-written as

    ```javascript
        conversionTagView.collection.fetch().done(conversionTagView.render);
    ```
* You can chain jQuery methods
    ```javascript
        this.ui.submit.removeClass('disabled').html('Retry');
    ```
* You can use ui elements in stick bindings with `@ui.name` style syntax.  Then throw this in the onShow or onRender method:
    ```javascript
        /** This allows us to use UI keys in bindings */
        this.bindings = Marionette.normalizeUIKeys(this.bindings, this._uiBindings);
    ```

## edit-conversiontag-view.js

* general recommendation to use a leading `$` in any variables that contain jQuery elements
* You can get data from HTML elements more appropriately through the `.data` method. Change line 163 to `$(e.currentTarget).data('id');`.  Also, if any data has a `-` in its name you can access it through camelCase using the `data` method.  So `<div id="ugh" data-foo-bar="hi"></div>` you could access `foo-bar` by `$('#ugh').data('fooBar');`.
