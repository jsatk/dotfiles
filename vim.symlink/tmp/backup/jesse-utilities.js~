/**
 * This is a collection of random Utilities. These are things I find myself or
 * others doing often. I got sick of recreating (or googling) solutions to
 * already solved problems. So I store them here. Hope you find it useful too.
 */

'use strict';

exports.Utilities = {
  addCommas: function(nStr) {
    nStr += '';

    var rgx = /(\d+)(\d{3})/;
    var x   = nStr.split('.');
    var x1  = x[0];
    var x2  = x.length > 1 ? '.' + x[1] : '';

    while (rgx.test(x1)) {
      x1 = x1.replace(rgx, '$1' + ',' + '$2');
    }

    return x1 + x2;
  },

  truncateStr: function(str, limit) {
    if (str.length > limit) {
      return str.substring(0, limit) + '...';
    }

    return str;
  },

  todayPlusN: function(nDays) {
    var today = new Date();

    today.setDate(today.getDate() + nDays);

    return today;
  },

  toIsoDate: function(date) {
    var pad = function(n) { return n < 10 ? '0' + n : n; };

    return date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate());
  },

  isLastDayOfMonth: function(date) {
    var date1 = new Date(date.toString());
    var date2 = new Date(date.toString());

    date2.setDate(date2.getDate() + 1);

    return date1.getMonth() !== date2.getMonth();
  },

  lastDayOfMonth: function(date) {
    return new Date(date.getFullYear(), date.getMonth() + 1, 0);
  },

  firstDayOfMonth: function(date) {
    return new Date(date.getFullYear(), date.getMonth(), 1);
  },

  ensureNamespace: function(namespaceString) {
    var tokens  = namespaceString.split('.');
    var ns      = window;

    tokens.forEach(function(token) {
      ns[token] = ns[token] || {};
      ns        = ns[token];
    });
  },

  deparam: function(queryString) {
    var hash = {};

    // Trims the '?' from the front of the queryString if it is present.
    queryString = queryString.charAt(0) === '?' ? queryString.substring(1) : queryString;

    var cleanedQueryString = decodeURIComponent(queryString);
    var tokens             = cleanedQueryString.split('&');

    tokens.forEach(function(token) {
      var parts     = token.split('=');
      var key       = parts[0];
      var value     = parts[1];

      hash[key] = value;
    });

    return hash;
  },

  isValuePresent: function(attr) {
    // String validation.
    if (typeof attr === 'string' && attr === '') {
      return false;
    }

    // Non-string validation.
    if (Number.isNaN(attr) || attr === null || typeof attr === 'undefined') {
      return false;
    }

    return true;
  },

  isIsoDate: function(str) {
    return (/^\d{4}\-\d{2}-\d{2}$/).test(str);
  },

  randomSort: function(arr) {
    arr.sort(function() {
      return Math.round(Math.random()) - 0.5;
    });

    return arr;
  },

  hideOnClickOffOf: function($container, $button, clickOffBehavior) {
    var containerOrButton;

    if (!$) { throw new Error('This method requires jQuery'); }

    $button    = $button    instanceof $ ? $button    : $($button);
    $container = $container instanceof $ ? $container : $($container);

    containerOrButton = function(event) {
      return  (!$button.is(event.target)    && $button.has(event.target).length     === 0) &&
              (!$container.is(event.target) && $container.has(event.target).length  === 0);
    };

    determineClickoffOfBehavior = function() {
      switch (clickOffBehavior) {
      case 'opacity':
        $container.animate({ opacity: 0 }, 'fast');

        break;
      case 'fade':
        $container.fadeOut('fast');

        break;
      case 'remove':
        $container.remove();

        break;
      default:
        $container.hide();
      }
    };

    $(document).on('click', function(event) {
      if (!containerOrButton(event)) { return; }
      determineClickoffOfBehavior();
    });
  },

  reverseString: function(str) {
      return str.split('').reverse().join('');
  },

  isPalindrom: function(str) {
    return str === this.reverseString(str);
  },

  numOfCharsToMakeStringAPalindrom: function(str) {
    var stack = '';

    while (isPalindrom(str) !== true) {
      stack += str.charAt(0);
      str = str.substring(1);
    }

    return stack.length;
  },

  sortArrayOfStringsByShortest: function(arr) {
    arr.sort(function(a, b) {
      return b.length - a.length;
    });
  },

  reverseSentence: function(sentence) {
    return sentence.split(' ').map(function(str) {
      return str.split('').reverse().join('');
    }).join(' ');
  },

  stringToArray: function(arrayOrString) {
    if (typeof arrayOrString === 'string') {
      return arrayOrString.split('');
    }
  },

  getUniquesIn: function(arrayOrString) {
    arrayOrString = stringToArray(arrayOrString);

    return arrayOrString.filter(function(item, index, array) {
      return array.indexOf(item) === index;
    });
  },

  getNonDuplicatesIn: function(arrayOrString) {
    arrayOrString = stringToArray(arrayOrString);

    return arrayOrString.sort().filter(function(num, index, arr) {
      return ((num === arr[index + 1]) || (num === arr[index - 1])) ? false : true;
    });
  },

 fibonacci function(n) {
  if (n < 2) return 1; // If n is less than 2 then return 1.

  /*
   * I intentionally left out the `else` here since it is unnecessary and some
   * linters yell about having an `else` aftera  `return`.
   *
   * Here we are recurssively calling fibonacci until n is less than 2.  At this
   * point we return `1` rather than recussively call `fibonacci` again.
   */

  return fibonacci(n - 2) + fibonacci(n - 1);
}

};
