/* global dependencies */
var accounting = require('accounting');
var numeral = require('numeral');
var moment = require('moment');
var _ = require('underscore');
var _string = require('underscore.string');
var Handlebars = require('handlebars/runtime').default;
var AppChannel = require('advisor/app-channel');
var role = require('advisor/common/role');

/* local dependencies */
var CommonLanguage = require('../common/language');

(function() {
    if (!Handlebars || !_) {
        return;
    }

    Handlebars.registerHelper('debug', function(optionalValue) {
        console.log('Debug Context of this');
        console.log('=============');
        console.log(this);

        if (optionalValue) {
            console.log('Debug Context of Optional Value');
            console.log('=============');
            console.log(optionalValue);
        }
    });

    Handlebars.registerHelper('if_eq', function(a, b, opts) {
        if (a === b) {
            return opts.fn(this);
        }
        else {
            return opts.inverse(this);
        }
    });

    Handlebars.registerHelper('ifCurrentView', function(objectView, currentView, options) {
        if (objectView === currentView) {
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    });

    Handlebars.registerHelper('hasFilterOptions', function(filters, options) {
        if (_.isEmpty(filters)) {
            return options.inverse(this);
        } else {
            return options.fn(this);
        }
    });

    Handlebars.registerHelper('objective', function(term, isClassic, options) {
        if (!term) {
            return '';
        }

        var result;
        var objectiveMap;
        var iTerm = term.toLowerCase();

        if (isClassic) {
            objectiveMap = CommonLanguage.en.objective_classic;
        } else {
            objectiveMap = CommonLanguage.en.objective;
        }

        // Keys case-sensitive result:
        // result = objectiveMap[term];
        // Keys case-insensitive result:
        _.each(objectiveMap, function(val, key) {
            if (key.toLowerCase() === iTerm) {
                result = val;
            }
        });

        if (!result) {
            return term;
        } else {
            return new Handlebars.SafeString(result);
        }
    });

    Handlebars.registerHelper('canCreateInitiatives', function(options) {
        return AppChannel.request('session:grant:entities:can_create_initiatives') ? options.fn(this) : options.inverse(this);
    });

    Handlebars.registerHelper('restrict', function(context, options) {
        return role.check(role[context]) ? options.fn(this) : options.inverse(this)
    });

    Handlebars.registerHelper('canManageInitiative', function(brand_id, initiative_id, options) {
        return AppChannel.request('session:grant:entities:can_manage_brand_or_initiative', brand_id, initiative_id) ? options.fn(this) : options.inverse(this);
    });

    Handlebars.registerHelper('toLowerCase', function(str) {
        return str.toLowerCase();
    });

    Handlebars.registerHelper('formatDate', function(datetime, format) {
        var date   = moment(datetime);

        format = _.isString(format) && !_.isEmpty(format) ? format : 'MMM Do YYYY';

        return new Handlebars.SafeString(date.format(format));
    });

    Handlebars.registerHelper('initiativeDetailDate', function(datetime, options) {
        var date = moment(datetime);
        return new Handlebars.SafeString(date.format('M/D/YY'));
    });

    Handlebars.registerHelper('percentage', function(amount, options) {
        if (!amount) {
            return 'N/A';
        }

        var result = Math.round(amount) + '%';

        return new Handlebars.SafeString(result);
    });

    Handlebars.registerHelper('formatDollar', function(val) {
        var result = Math.round(val * 100) / 100;
        return new Handlebars.SafeString(result);
    });

    Handlebars.registerHelper('add_commas', function(number) {
        return numeral(number).format('0,0');
    });

    Handlebars.registerHelper('kpi_results', function(objective) {
        return CommonLanguage.en.results[objective];
    });

    Handlebars.registerHelper('kpi', function(objective) {
        return CommonLanguage.en.kpi[objective];
    });

    Handlebars.registerHelper('language', function(key, value) {
        return CommonLanguage.en[key][value];
    });

    Handlebars.registerHelper('initiativePacing', function(value) {
        return CommonLanguage.en.getInitiativePaceMsg(value);
    });

    Handlebars.registerHelper('initiativeCampaignToggle', function(value) {
        return CommonLanguage.en.getInitiativeCampaignToggleMsg(value);
    });

    Handlebars.registerHelper('insertionOrderOpportunitiesToggle', function(value) {
        return CommonLanguage.en.getInsertionOrderOpportunitiesToggleMsg(value);
    });

    Handlebars.registerHelper('accountName', function() {
        return CommonLanguage.en.getAccountNameHTML(this).html();
    });

    Handlebars.registerHelper('assetName', function() {
        return CommonLanguage.en.getAssetNameHTML(this).html();
    });

    Handlebars.registerHelper('userName', function() {
        return CommonLanguage.en.getUserNameHTML(this).text();
    });

    Handlebars.registerHelper('percentOf', function(value, outOf) {
        return accounting.formatNumber([value / outOf] * 100, 0) + '%';
    });

    Handlebars.registerHelper('endingIn', function(value) {
        var durationInfo = CommonLanguage.en.getDurationFromNowInfo(value);
        var isPast = durationInfo.isPast;
        return {
            'label': isPast ? 'Ended' : 'Ending in',
            'value': durationInfo.durationString +
                (isPast ? ' ago ' : ' ') +
                '<small>' + durationInfo.date.format('MM/DD/YYYY') + '</small>'
        };
    });

    Handlebars.registerHelper('is_website_conversion', function(options) {
        if (CommonLanguage.en.objective[this.objective] === 'Website Conversions') {
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    });

    // ex: {{formatMoney spend_lifetime symbol='â‚¬' precision='0'}}
    Handlebars.registerHelper('formatMoney', function(val, options) {
        var opts = _.extend({
                symbol: '$',
                precision: 2
            }, options.hash);
        return accounting.formatMoney(val, opts.symbol, opts.precision);
    });

    Handlebars.registerHelper('log', function(something) {
        console.log(something);
    });

    Handlebars.registerHelper('humanize', function(string) {
        return _string.humanize(string);
    });

    Handlebars.registerHelper('titleize', function(string) {
        string = _string.humanize(string);
        return _string.titleize(string);
    });

    // Add a hint to the browser for breaking a line after an underscore
    Handlebars.registerHelper('breakUnderscores', function(string) {
        string = Handlebars.Utils.escapeExpression(string);
        string = string.replace(/_/g, '_&#8203;');
        return new Handlebars.SafeString(string);
    });

    Handlebars.registerHelper('last', function(array) {
        return array ? array[array.length - 1] : array;
    });

    Handlebars.registerHelper('first', function(array) {
        return array ? array[0] : array;
    });

    Handlebars.registerHelper('is', function(value, key, options) {
        return (value === key) ? options.fn(this) : options.inverse(this);
    });

    Handlebars.registerHelper('isNot', function(value, key, options) {
        return (value !== key) ? options.fn(this) : options.inverse(this);
    });

    Handlebars.registerHelper('has', function(value, key, options) {
        return value.hasOwnProperty(key) ? options.fn(this) : options.inverse(this);
    });

    Handlebars.registerHelper('ifShowTargetingAgeRange', function(platform, options) {
        return (platform === 'FACEBOOK') ? options.fn(this) : options.inverse(this);
    });

    Handlebars.registerHelper('ifShowTracking', function(platform, options) {
        return (platform === 'FACEBOOK') ? options.fn(this) : options.inverse(this);
    });

    Handlebars.registerHelper('ifWebsiteConversion', function(objective, options) {
        return (_.contains(['FB_PIXEL_CONVERSIONS', 'OFFSITE CONVERSIONS', 'WEBSITE_CONVERSIONS'], objective)) ? options.fn(this) : options.inverse(this);
    });

    Handlebars.registerHelper('ifLengthGreaterThan', function(array, value, options) {
        return (array.length > value) ? options.fn(this) : options.inverse(this);
    });

    Handlebars.registerHelper('fallback', function(value, fallback) {
        return new Handlebars.SafeString(value || fallback);
    });

})();
