/* global dependencies */
var _ = require('underscore');
var $ = require('jquery');
var Marionette = require('backbone.marionette');
var AppChannel = require('advisor/app-channel');

var DateRangeView = require('advisor/common/daterange-picker-control');
var DateRangeTemplate = require('advisor/common/templates/DateRangePicker.hbs');

var LayoutTemplate = require('./templates/browser-layout.hbs');

var BrowserLayoutView = Marionette.LayoutView.extend({
    template: LayoutTemplate,

    regions: {
        'dateRegion': '[data-region="date"]',
        'tableRegion': '[data-region="databrowser"]',
    },

    modelEvents: {
        'child:browse': 'browseChild'
    },

    ui: {
        'levels': 'ul.obj-levels a',
        'tabs': 'ul.obj-tabs a'
    },

    events: {
        'click @ui.levels a': 'changeLevel',
        'click @ui.tabs': 'changeLevel'
    },

    /* Define on platform subclass */
    objectViews: [
        /** Example of view
         * {
         *     slug: 'adobjects',
         *     label: 'Ad Objects',
         *     view: require('./adobject-view')
         * }
         */
    ],

    /* Platform options */
    dateFormat: 'YYYY-MM-DD',

    browseChild: function(childView) {
        this.showChildView('tableRegion', childView);
    },

    /** @param {$.Event} event */
    changeLevel: function(event) {
        event.preventDefault();

        // TODO: Update to not wrap in jQuery.  Data can be accessed directly off of event.
        var newLevel = $(event.currentTarget).data('browse');

        this.childViewForLevel(newLevel);

        // Update params
        AppChannel.trigger('url:addParams', { level: newLevel });
    },

    /** @param {Object} options */
    initialize: function(options) {
        // Can we just leave this on the options object?  Why are we assigning at the top level here?
        this.objectViews = options.objectViews;
        // Date range view
        this.dateRangeView = new DateRangeView({
            template: DateRangeTemplate,
            className: 'btn btn-sm btn-default'
        });
        this.dateModel = this.dateRangeView.model;
    },

    highlightTab: function(tab) {
        tab = tab || this.currentTab();

        this.$('ul.obj-tabs li').each(function() {
            var dataTab = $(this);
            var isActive = (dataTab.data('tab') === tab);
            dataTab.toggleClass('active', isActive);
        });
    },

    highlightLevel: function(level) {
        level = level || this.currentLevel();

        this.$('ul.obj-levels li').each(function() {
            var $tab = $(this);
            var isActive = ($tab.data('level') === level);
            $tab.toggleClass('active', isActive);
        });
    },

    childViewForLevel: function(level) {
        var ViewClass = this.viewForLevel(level);
        var view = new ViewClass({
            campaignModel: this.model,
            dateModel: this.dateModel
        });
        this.templateHelpers();
        this.showChildView('tableRegion', view);
    },

    onBeforeShow: function() {
        this.showChildView('dateRegion', this.dateRangeView);
        this.childViewForLevel(this.currentLevel());
    },

    onShow: function() {
        this.highlightTab();
        this.highlightLevel();
    },

    /* Shouldn't have to touch this stuff */
    defaultLevel: function() {
        var objView = this.objectViews[0];
        return objView.slug;
    },
    currentTab: function() {
        var objView = _.findWhere(this.objectViews, { slug: this.currentLevel() });
        return objView.tab;
    },
    currentLevel: function() {
        var params = AppChannel.trigger('url:getParams');
        return params.level || this.defaultLevel();
    },
    viewForLevel: function(level) {
        // Grab the current level slug, or pass in a level
        level = level || this.currentLevel();

        // Filter object views for the selected level
        var objView = _.findWhere(this.objectViews, { slug: level });

        // Select correct tab
        this.highlightTab(objView.tab);

        // Highlight the proper level
        this.highlightLevel(level);

        return objView.view;
    },
    templateHelpers: function() {
        var platform = this.model.get('subplatform') || this.model.get('platform');
        var currentLevel = this.currentLevel();
        var activeTab = this.getActiveTab(currentLevel);
        var levels = _.where(this.objectViews, { tab: activeTab });
        return {
            effectivePlatform: platform,
            currentLevel:      currentLevel,
            levels:            levels,
            activeTab:         activeTab,
            showAssetsTab:     this.model.get('platform') === 'FACEBOOK'
        };
    },
    getActiveTab: function(level) {
        if (this.getOption('tab')) return this.getOption('tab');
        /**
         * Using a switch to easily allow for the addition of more tabs.
         * Also, I realize this is rather verbose.  I feel it's safer to be explicit here and communicates more clearly
         * to the next developer that comes along better than an `if else` statement.
         */
        switch (level) {
        case 'ads':
        case 'adset':
        case 'adsets':
        case 'adgroups':
        case 'campaigns':
        case 'promotedaccounts':
        case 'promotedtweets':
            return 'performance';
        case 'adclusters':
        case 'audiences':
        case 'creatives':
            return 'assets';
        }
    }
});

module.exports = BrowserLayoutView;
