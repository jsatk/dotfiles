/* global dependencies */
var React = require('react');
var d3 = require('d3');

/* module definition */
var Compare = React.createClass({
    componentDidMount: function() {
        this.compareIds = this.props.compare;
        this.drawChart();
    },
    updateIds: function(ids) {
        var base = this.compareIds.base;
        this.compareIds = ids;
        this.compareIds.base = base;
        this.update();
    },
    drawChart: function() {
         if (_.isEmpty(this.compareIds)) {
             return;
         }
         // Set our margins
         var margin = {
                top: 20,
                right: 20,
                bottom: 30,
                left: 40
            };
         var width = 580 - margin.left - margin.right;
         var height = 250 - margin.top - margin.bottom;
         var x0 = d3.scale.ordinal().rangeRoundBands([
            0, width
        ], .1);
         var x1 = d3.scale.ordinal();
         var y = d3.scale.linear().rangeRound([
            height, 0
        ]);
         var color = d3.scale.ordinal().range([
            '#98abc5', '#8a89a6', '#7b6888', '#6b486b', '#a05d56', '#d0743c', '#ff8c00'
        ]);
         var xAxis = d3.svg.axis().scale(x0).orient('bottom');
         var yAxis = d3.svg.axis().scale(y).orient('left').tickFormat(d3.format('.2s'));
         var svg = d3.select('#compare-chart').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
         // expose and call update method, this will be used when the data is changed.
         var self = this;
         var data;
         this.update = function(append) {
             data = _.values(self.compareIds);
             data = data.map(function(d) {
                return {
                    'Facebook Reach': d.reach_US_FB,
                    'Audience Reach': d.reach_audience,
                    name: d.name || 'Total'
                };
            });
             color.domain(d3.keys(data[0]));
             var metricNames = d3.keys(data[0]).filter(function(k) {
                return k !== 'name';
            });
             data.forEach(function(d) {
                d.metrics = metricNames.map(function(name) {
                    return {
                        name: name,
                        value: +(d[name] || 0)
                    };
                });
            });
             x0.domain(data.map(function(d) {
                return d.name;
            }));
             x1.domain(metricNames).rangeRoundBands([
                 0, x0.rangeBand()
             ]);
             var yMax = d3.max(data, function(d) {
                return d3.max(d.metrics, function(d) {
                    return d.value;
                });
            });
             y.domain([
                 0, yMax
             ]);
             // update our data:
             var name = svg.selectAll('.name')
             name = name.data(data).attr('class', 'name g').attr('transform', function(d) {
                return 'translate(' + x0(d.name) + ',0)';
            });
             name.enter().append('g').attr('class', 'name g').attr('transform', function(d) {
                return 'translate(' + x0(d.name) + ',0)';
            });
             name.exit().remove()
             var rect = name.selectAll('rect').data(function(d) {
                return d.metrics;
            }).attr('width', x1.rangeBand()).attr('x', function(d) {
                return x1(d.name);
            }).attr('y', function(d) {
                return height;
            }).attr('height', function(d) {
                return 0;
            }).style('fill', function(d) {
                return color(d.name);
            })
             rect.enter().append('rect').attr('width', x1.rangeBand()).attr('x', function(d) {
                return x1(d.name);
            }).attr('y', function(d) {
                return height;
            }).attr('height', function(d) {
                return 0;
            }).style('fill', function(d) {
                return color(d.name);
            })
             rect.transition().duration(500).attr('height', function(d) {
                return height - y(d.value);
            }).attr('y', function(d) {
                return y(d.value);
            })
             var anim = d3.select('#compare-chart').transition()
             anim.select('.x.axis').duration(750).call(xAxis); // change the x axis
             anim.select('.y.axis').duration(750).call(yAxis); // change the y axis
             // refresh our legend
             svg.selectAll('.legend').remove();
             var legend = svg.selectAll('.legend').data(color.domain().slice().filter(function(d) {
                return d !== 'name';
            }).reverse()).enter().append('g').attr('class', 'legend').attr('transform', function(d, i) {
                return 'translate(0,' + i * 20 + ')';
            });
             legend.append('rect').attr('x', width - 18).attr('width', 18).attr('height', 18).style('fill', color);
             legend.append('text').attr('x', width - 24).attr('y', 9).attr('dy', '.35em').style('text-anchor', 'end').text(function(d) {
                return d;
            });
         };
         this.update(true);
         svg.append('g').attr('class', 'x axis').attr('transform', 'translate(0,' + height + ')').call(xAxis);
         svg.append('g').attr('class', 'y axis').call(yAxis).append('text').attr('transform', 'rotate(-90)').attr('y', 6).attr('dy', '.71em').style('text-anchor', 'end').text('Reach');
     },
    render: function() {
        return <div id='compare-chart'></div>
    }
});

module.exports = Compare;
