/** @namespace AdvisorApp.AdCreationApp.Models */
AdvisorApp.module('AdCreationApp.Models', function(Module, App) {

    /**
     * @module AdVisorApp.AdCreationApp.Models.AdCollection
     * @constructor
     */

    Module.AdCollection = Backbone.Model.extend({

        urlRoot: '/api/advisor/v1/adcollection',

        /** @returns {Promise} */
        getReach: function() {

            return $.ajax({
                type:    'get',
                url:     this.url() + 'reachestimate',
                context: this,
                success: this.onReachDone,
                error:   this.onReachFail
            });

        },

        /**
         * @param {Object} response
         * @private
         */
        onReachDone: function(response) {

            // TODO: This only handles FB reach. Make flexible
            this.set('reach', response.users);

        },

        /**
         * @param {Object} response
         * @private
         */
        onReachFail: function(response) {

            this.set('reach', 'unknown');
            console.error('Error retrieving reach', response);

        }

        /** @returns {Boolean} */
        areBidAndBudgetValid: function() {
            return this.bidValidation() && this.budgetValidation();
        },

        /** @returns {Boolean} */
        bidValidation: function() {
            var bidInfoLength = _.keys(this.get('bid_info')).length;

            // If we have no bidInfo or if the bidInfo is set to oCPM all four fields haven't been filled out.
            if ((bidInfoLength === 0) || (this.get('bid_type') === 'oCPM' && bidInfoLength !== 4)) {
                return false;
            }

            // Filters out all bidInfos that are filled out. Then tests to see if that array is empty. Then finally returns the inverse of that.
            // bid is only valid if all possible values are filled out.
            return _(this.get('bid_info')).every(function(info) { return info !== ''; });
        },

        /** @returns {Boolean} */
        budgetValidation: function() {
            switch (this.get('budget_type')) {
            case 'Daily':       return this.get('daily_budget') !== '';
            case 'Liftetime':   return this.get('lifetime_budget') !== '';
            default:            return false;
            }
        }

    });

});
