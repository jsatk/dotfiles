AdvisorApp.module('Common.Behaviors', function(Behaviors, App) {

    /**
     * @class
     */
    Behaviors.DateRangeValidate = Marionette.Behavior.extend({

        defaults: {
            startPicker: '.start-picker-sc',
            endPicker: '.end-picker-sc'
        },

        /**
         * @returns {Object}
         */
        ui: function() {
            return {
                startPicker: this.options.startPicker,
                endPicker: this.options.endPicker
            };
        },

        /**
         * @param {$.Event} e from the click event.
         */
        changeValidLimit: function(e) {
            var behaviorUI  = e.data.behavior.ui;
            var startPicker = behaviorUI.startPicker;
            var endPicker   = behaviorUI.endPicker;
            var startDate   = startPicker.find('input').val();
            var endDate     = endPicker.find('input').val();

            endPicker.datepicker('setStartDate', startDate);

            // We must specify the format here.  See: https://github.com/moment/moment/issues/1407
            if (moment(endDate, 'MM/DD/YYYY').isBefore(startDate, 'MM/DD/YYYY')) {
                endPicker.datepicker('update', '');
            }
        },

        onRender: function() {
            this.ui.endPicker.datepicker({
                todayHighlight: true
            });
            this.ui.startPicker.datepicker({
                todayHighlight: true
            }).on('changeDate', { behavior: this }, this.changeValidLimit);
        }
    });

    /**
     * @class
     */
    Behaviors.NewCampaignDateRangeValidate = Behaviors.DateRangeValidate.extend({
        onRender: function() {
            /**
             * Limit the dates availble for a Campaign to be within the dates of the Initiative.
             */
            var self = this;
            this.ui.insertion_order_select.on('change', function(e) {
                var insertion_order = self.ui.insertion_order_select.select2('data');
                var initiative = self.view.model.get('initiative');
                if (!_.isNull(insertion_order)) {
                    var ioStartDate = moment(insertion_order.start_date, 'YYYY-MM-DD').toDate();
                    var ioEndDate = moment(insertion_order.end_date, 'YYYY-MM-DD').toDate();
                    var initiativeStartDate = moment(initiative.start_date, 'YYYY-MM-DD').toDate();
                    var initiativeEndDate = moment(initiative.end_date, 'YYYY-MM-DD').toDate();
                    var startDate = _.max([ioStartDate, initiativeStartDate]);
                    var endDate = _.min([ioEndDate, initiativeEndDate]);
                    self.ui.endPicker.datepicker({
                        endDate: endDate,
                        startDate: startDate,
                        todayHighlight: true
                    }).on('changeDate', { behavior: self }, self.changeValidLimit);
                    self.ui.startPicker.datepicker({
                        endDate: endDate,
                        startDate: startDate,
                        todayHighlight: true
                    }).on('changeDate', { behavior: self }, self.changeValidLimit);

                    /** Default the Start/End Dates to the Initiative Start/End Dates */
                    self.ui.endPicker.datepicker('setDate', endDate);
                    self.ui.startPicker.datepicker('setDate', startDate);
                }
            });
        }
    });

    /**
     * @class
     */
    Behaviors.CurrencyValidate = Marionette.Behavior.extend({

        events: {
            /**
             * Unformat string on focus
             * @param {$.Event} e from the focus event
             */
            'focus [data-currency]': function(e) {
                /** Variables */
                var target = e.currentTarget;
                var value  = $(target).val();

                /** Remove everything except numbers and decimal mark */
                var unformatted = accounting.unformat(value);

                /** Set value */
                $(target).val(unformatted || undefined);
            },

            /**
             * Format currency on blur
             * @param {$.Event} e from the blur event
             */
            'blur [data-currency]': function(e) {
                /** Variables */
                var target = e.currentTarget;
                var value  = $(target).val();

                /** Default currency options */
                var defaults = accounting.settings.currency;

                /** Updated currency options if data attribute is available */
                var targetData  = $(target).data();
                var updates = {
                    symbol:    targetData['currency-symbol'],
                    decimal:   targetData['currency-decimal'],
                    thousand:  targetData['currency-thousand'],
                    precision: targetData['currency-precision'],
                    format:    targetData['currency-format']
                };

                /** Merged currency options */
                var options = $.extend({}, defaults, updates);

                // Is number
                var isNumber = value || (value === 0);

                /** Format value */
                var formatted = isNumber && accounting.formatMoney(value, options) || undefined;

                /** Set value */
                $(target).val(formatted);
            },

            /**
             * Only accept numbers and two decimal places
             * @param {$.Event} e from the keypress event
             */
            'keypress [data-numeric]': function(e) {
                /** Variables */
                var target = e.currentTarget;
                var value  = $(target).val();
                var keycode = e.keyCode || e.charCode;

                // If it's a backspace (8), allow it and move on.
                if (keycode === 8) {
                    return;
                }
                var input  = String.fromCharCode(keycode);
                var index  = target.selectionStart;

                /** Updated string */
                var updated = value.substring(0, index) + input + value.substring(index);

                /** Expression */
                var expr    = new RegExp(/^(\d+)?(?:\.\d{0,2})?$/);
                var invalid = !expr.test(updated);

                /** Precent default */
                if (invalid) {
                    e.preventDefault();
                }
            },

            /**
             * DEPRECATED
             *
             * @param {$.Event} e from the click event.
             * @returns {Boolean|Undefined}
             */
            'keyup .currency-sc': function(e) {
                var $target              = $(e.currentTarget);
                var value                = $target.val();
                var indexOfDecimal       = value.indexOf('.');
                var maxLengthWithDecimal = indexOfDecimal + 3;

                if (isNaN(value.replace(/,/g, ''))) {
                    $target.val(accounting.formatNumber(value));
                    return false;
                }
                if (indexOfDecimal > -1 && (value.length > maxLengthWithDecimal)) {
                    $target.val(value.substring(0, maxLengthWithDecimal));
                }
            }
        }

    });

    Behaviors.FadeIn = Marionette.Behavior.extend({
        onShow: function() {
            this.$el.css('opacity', 0).animate({
                opacity: 1
            }, 400);
        }
    });

    /**
     * @class
     */
    Behaviors.DisplayError = Marionette.Behavior.extend({

        defaults: {
            errorContainerSel: '#error',
            genericErrorMsg: 'There was an error.'
        },

        /**
         * @returns {Object}
         */
        ui: function() {
            return {
                errorContainer: this.options.errorContainerSel
            };
        },

        /**
         * @param {String} errorText
         */
        onError: function(errorText) {
            this.ui.errorContainer.html(errorText || this.options.genericErrorMsg).removeClass('hidden');
        },

        onClearError: function() {
            this.ui.errorContainer.empty().addClass('hidden');
        }
    });

    App.addInitializer(function() {

        Marionette.Behaviors.behaviorsLookup = function() {
            return Behaviors;
        };

    });
}, moment);
