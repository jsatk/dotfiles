/* global dependencies */
var $ = require('jquery');
var Backbone = require('backbone');
var _ = require('underscore');
var Marionette = require('backbone.marionette');

/* templates */
var InitiativeAssetsChooserTemplate = require('../templates/initiativeAssetsChooser.hbs');

/* module definition */
var AssetsSelectView = Marionette.ItemView.extend({
    template: InitiativeAssetsChooserTemplate,
    ui: {
        selector: '#assetSelector'
    },
    events: {
        'change @ui.selector': function(e) {
            var selected = this.model.get(e.val);
            this.trigger('selected', selected);
        }
    },
    /** @param {object} options */
    initialize: function(options) {
        if (options.promise) {
            this.initializeWithPromise(options.promise);
        }

        // allows pre-selection of an asset when onShow is called
        if (options.selectedAsset) {
            this.selectedAsset = options.selectedAsset;
        }
    },
    /** @param {jQuery.Deferred} promise */
    initializeWithPromise: function(promise) {
        this.loading = true;
        promise.done(_(function(assets) {
            this.model = assets;
            delete this.loading;
            // Don't call onShow unless this view has been rendered
            if (this.hasShown) {
                this.onShow();
                this.toggleDropdown();
            }
        }).bind(this));
        this.model = new Backbone.Collection();
    },
    toggleDropdown: function() {
        if (this.shouldDisableDropdown()) {
            this.ui.selector.attr('disabled', 'disabled');
        } else {
            this.ui.selector.removeAttr('disabled');
        }
    },
    /** @returns {boolean} */
    shouldDisableDropdown: function() {
        return this.model.length < 2;
    },
    onShow: function() {
        this.hasShown = true;
        this.ui.selector.select2({
            data: this.model.toJSON(),
            id: function(obj) {
                return obj.asset_id;
            },
            text: function(obj) {
                return obj.name;
            },
            placeholder: this.loading ? 'Loading...' : 'Select an asset',
            minimumResultsForSearch: -1,
            formatResult: this.formatAsset,
            formatSelection: this.formatAsset,
            initSelection: this.initSelection
        });
        if (this.model.length === 1) {
            var first = this.model.at(0);
            this.ui.selector.select2('val', first.id, true);
        }
        if (!_.isUndefined(this.selectedAsset) && !this.loading) {
            this.ui.selector.select2('val', this.selectedAsset.get('asset_id'), true);
        }
    },
    formatAsset: function(obj) {
        return '<div class="select2-asset-selection">' +
               '<img src="' + obj.picture + '"> ' + obj.name +
               '</div>';
    },
    initSelection: function($element, callback) {
        var id = $element.val();
        if (id !== '') {
            debugger;
            callback(_.findWhere(this.data, {asset_id: id}));
        }
    },
    templateHelpers: function() {
        return {
            disabled: this.shouldDisableDropdown()
        };
    }
});

module.exports = AssetsSelectView;
