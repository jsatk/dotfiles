AdvisorApp.module('CampaignModule.Views', function(Views, App) {
    Views.CloneCampaignView = Marionette.ItemView.extend({

        template: Handlebars.templates.CloneCampaignForm,

        title: 'Duplicate Campaign',

        className: 'clone-campaign-form-sc',

        ui: {
            name: '#name',
            cancel: '#cancel'
        },

        triggers: {
            'click @ui.cancel': 'cancel',
            'submit form': 'save'
        }
    });

    Views.Details = Marionette.ItemView.extend({
        template: Handlebars.templates.DetailsCard,
        budgetAdjustments: (function() {
            return App.module('Common.Language').en.budget_adjustment;
        }()),
        ui: {
            editLink: '#edit-details',
            cloneLink: '#clone-details',
            moreDetailsLink: '#more-details',
            cancelEditLink: '#cancel-edit-details',
            saveChanges: '#save-changes',
            name: '#name',
            budget: '#budget',
            kpiGoal: '#kpi-goal',
            startDate: '#start_date',
            endDate: '#end_date',
            budgetAdjustment: '#budget_adjustment',
            budgetAdjustmentSelect: '#budget_adjustment_select',
            budgetAdjustmentOther: '#budget_adjustment_other',
            budgetAdjustmentOtherText: '#budget_adjustment_other_text'
        },
        events: {
            'click @ui.editLink': function(e) {
                e.preventDefault();
                this.linkClick(true);
            },
            'click @ui.moreDetailsLink': function(e) {
                e.preventDefault();
                AdvisorApp.module('CampaignModule').moduleChannel.vent.trigger('edit:show', this.model.get('initiative_id'), this.model.get('id'));
            },
            'click @ui.cloneLink': function(e) {
                e.preventDefault();
                this.cloneLinkClick();
            },
            'click @ui.cancelEditLink': function(e) {
                e.preventDefault();
                this.linkClick(false);
            },
            'click @ui.saveChanges': function(e) {
                e.preventDefault();
                this.saveChanges();
            },
            'change @ui.budget': 'handleBudgetUpdate',
            'change @ui.budgetAdjustment': 'handleBudgetAdjustmentUpdate'
        },
        handleBudgetUpdate: function() {
            this.ui.budgetAdjustment.show();
            this.ui.budgetAdjustment.trigger('change');
        },
        handleBudgetAdjustmentUpdate: function() {
            var budgetReason = this.ui.budgetAdjustmentSelect.find('option:selected').text();
            this.ui.budgetAdjustmentOther.toggle(budgetReason === 'Other');
        },
        initialize: function() {
            this.model.set('initiative_media_budget', this.getOption('initiative').get('media_budget'));
            this.model.set('initiative_end_date', moment(this.getOption('initiative').get('end_date')).format('MM/DD/YYYY'));
        },
        onRender: function() {
            if (this.model.get('editing')) {
                this.stickit(this.model, this.bindings);
                this.model.startTracking();
            }
        },
        templateHelpers:function() {
            return {
                editingLevel: this.model.getEditingLevel(),
                followers: this.getOption('initiative').get('followers').toJSON(),
                userCanManage: this.model.userCanManage()
            };
        },
        getTemplate: function() {
            return this.model.get('editing') ?  Handlebars.templates.DetailsEditCard : Handlebars.templates.DetailsCard;
        },
        onFollowers: function() {
            this.render();
        },
        linkClick: function(editing) {
            if (!editing) {
                this.unstickit();
                this.model.resetAttributes();
            }
            this.model.set('editing', editing);
            this.render();
        },
        cloneLinkClick: function() {
            var existingCampaignModel = this.model;
            var myCloneCampaignView = new Views.CloneCampaignView();
            myCloneCampaignView.on({
                cancel: function() {
                    this.triggerMethod('modal:close');
                },
                save: function() {
                    $.ajax({
                        url: '/api/advisor/v1/campaign/' + existingCampaignModel.get('id') + '/clone/',
                        type: 'post',
                        data: JSON.stringify({
                            name: myCloneCampaignView.ui.name.val()
                        }),
                        contentType: 'application/json',
                        success: function(clonedCampaignId) {
                            App.module('CampaignModule').moduleChannel.vent.trigger('edit:show',
                                    existingCampaignModel.get('initiative_id'), parseInt(clonedCampaignId));
                        }
                        // TODO "toast" failures via $.ajaxSetup(), etc.
                    });
                    this.triggerMethod('modal:close');
                }
            });
            App.modalRegion.show(myCloneCampaignView);
        },
        notOriginalDateValue: function(value, originalValue) {
            return moment(value).format('MM/DD/YYYY') !== moment(originalValue).format('MM/DD/YYYY');
        },

        /**
         * Handle the rare (?) cases where a user may select a new Start/End Date value, then change it
         * back to the original value.  Since we only want to send the edited values, we'll remove any
         * value changed and then set back to it's original value.  This is automatically handled by
         * backbone-trackit for the non-date fields, but because the dates are formatted through moment,
         * trackit cannot tell that a date has been set back to its original value.
         */
        checkDates: function(edits) {
            if (!this.notOriginalDateValue(edits.start_date, this.model._originalAttrs.start_date)) {
                edits = _(edits).omit('start_date');
            }
            if (edits.end_date) {
                if (edits.end_date === moment(this.model._originalAttrs.end_date).format('YYYY-MM-DD')) {
                    edits = _(edits).omit('end_date');
                }
            }
            return edits;
        },
        saveChanges: function() {
            var edits = this.checkDates(this.model.unsavedAttributes());
            /** If there are no edits then simply revert back to read-only mode */
            if (_(edits).isEmpty()) {
                this.linkClick(false);
            } else {
                if (edits.hasOwnProperty('budget_adjustment_select')) {
                    var pre_adjustment_budget = this.model._originalAttrs.budget;
                    var amount = edits.budget - pre_adjustment_budget;
                    $.ajax({
                        url: '/api/advisor/v1/budgetadjustment/',
                        type: 'post',
                        data: JSON.stringify({
                            campaign: this.model._originalAttrs.resource_uri,
                            pre_adjustment_budget: pre_adjustment_budget, //Budget before the adjustment
                            amount: amount, // Amount by which budget is being increased or decreased
                            adjustment_type: edits.budget_adjustment_select,
                            notes: edits.budget_adjustment_other_text || ''
                        }),
                        contentType: 'application/json',
                        error: function(model, response) {
                            AdvisorApp.mainRegion.currentView.detailsView.triggerMethod('Error', response.responseJSON.error_message);
                        }
                    });
                }
                this.model.save(edits, {
                    patch: true,
                    success: function(model, response) {
                        model.unset('budget_adjustment_other_text');
                        model.unset('budget_adjustment_select');
                        var details = AdvisorApp.mainRegion.currentView.detailsView;
                        details.model.set('editing', false);
                        details.render();
                    },
                    error: function(model, response) {
                        AdvisorApp.mainRegion.currentView.detailsView.triggerMethod('Error', response.responseJSON.error_message);
                    }
                });
            }
        },
        bindings: {
            '#name': {
                observe: 'name'
            },
            '#budget': {
                observe: 'budget',
                onSet: function(value, options) {
                    if (value < this.model.get('spend_lifetime')) {
                        Helpers.invalidInput(this.ui.budget, this.ui.saveChanges, 'Budget cannot be less than Total Spend');
                    } else {
                        Helpers.validInput(this.ui.budget, this.ui.saveChanges);
                    }
                    return accounting.unformat(value);
                }
            },
            '#kpi-goal': {
                observe: 'kpi_goal',
                onSet: function(value, options) {
                    if (value < 0) {
                        Helpers.invalidInput(this.ui.kpiGoal, this.ui.saveChanges, 'KPI Goal must be a positive value');
                    } else {
                        Helpers.validInput(this.ui.kpiGoal, this.ui.saveChanges);
                    }
                    return accounting.unformat(value);
                }
            },
            '#start_date': {
                observe: 'start_date',
                onGet: function(value) {
                    return moment(value, 'YYYY-MM-DD').format('MM/DD/YYYY');
                },
                onSet: function(value) {
                    var notOriginal = this.notOriginalDateValue(value, this.model._originalAttrs.start_date);
                    if ((moment(value) < moment().startOf('day')) && notOriginal) {
                        Helpers.invalidInput(this.ui.startDate, this.ui.saveChanges, 'Start Date cannot be earlier than current date');
                    } else {
                        Helpers.validInput(this.ui.startDate, this.ui.saveChanges);
                    }
                    return moment(value, 'MM/DD/YYYY').format('YYYY-MM-DD');
                }
            },
            '#end_date': {
                observe: 'end_date',
                onGet: function(value) {
                    return moment(value, 'YYYY-MM-DD').format('MM/DD/YYYY');
                },
                onSet: function(value) {
                    var notOriginal = this.notOriginalDateValue(value, this.model._originalAttrs.end_date);
                    if ((moment(value) < moment().startOf('day')) && notOriginal) {
                        Helpers.invalidInput(this.ui.endDate, this.ui.saveChanges, 'End Date cannot be earlier than current date');
                    } else {
                        Helpers.validInput(this.ui.endDate, this.ui.saveChanges);
                    }
                    return moment(value, 'MM/DD/YYYY').format('YYYY-MM-DD');
                }
            },
            'select#budget_adjustment_select': {
                observe: 'budget_adjustment_select',
                selectOptions: {
                    collection: 'this.budgetAdjustments',
                    defaultOption: {
                        label: 'Select Reason',
                        value: null
                    }
                }
            },
            '#budget_adjustment_other_text': {
                observe: 'budget_adjustment_other_text'
            }
        },
        behaviors: {
            DateRangeValidate: {},
            DisplayError: {}
        }
    });
});
