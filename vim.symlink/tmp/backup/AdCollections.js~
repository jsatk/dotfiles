/* global dependencies */
var _ = require('underscore');
var $ = require('jquery');
var Backbone = require('backbone');
var AppChannel = require('advisor/app-channel');

/* local dependencies */
var CampaignController = require('../../../campaign/controller');
var AdCollection = require('./AdCollection');
var record = require('../../record');

/* module definition */
var AdCollections = Backbone.Collection.extend({
    model: AdCollection,
    url: '/api/advisor/v1/adcollection',
    /**
     * @param {Backbone.Model} model
     * @param {Object} response
     */
    make: function(model, response) {
        /** Save */
        $.ajax({
            type: 'post',
            url: response.resource_uri + 'make_adcollections/',
            context: this,
            success: this.onMakeDone,
            error: this.onMakeFail
        });
        /** Message */
        record('channel').message('Generating collections');
        /** Record adcluster resource url */
        record('model:generic').set('adclusterUri', response.resource_uri);
    },
    /**
     * @param {Object} response
     * @private
     */
    onMakeDone: function(response) {
        /** Add ad collections */
        this.reset();
        this.add(response.ad_collections);
        /** Store creatives & demographics */
        var storage = record('model:generic');
        storage.set('_ad_creatives', response.ad_creatives);
        storage.set('_demographic_sets', response.demographic_sets);
        storage.set('_targeting_sets', response.targeting_sets);
        this.populateAudiences(response);
        /** Trigger success */
        record('channel:upload').success();
    },
    populateAudiences: function(response) {
        var placements = {
            desktopfeed: 'Desktop',
            mobilefeed: 'Mobile',
            rightcolumn: 'Right rail'
        };
        var genders = {
            male: 'men',
            female: 'women',
            all: 'men & women',
            none: 'no gender preference'
        };
        var uri = function(val) {
            return {
                resource_uri: val
            };
        };
        var naivePlural = function(num, str) {
            return num === 1 ? str : str + 's';
        };
        var demographics = response.demographic_sets[0];
        var locationSets = demographics.location_sets;
        var ageRanges = demographics.age_ranges;
        var targetingSubsets = _.pluck(response.targeting_sets, 'targeting_subsets');
        this.each(function(adcollection) {
            var audience = [];
            var places = adcollection.get('placement');
            if (places && places.length) {
                // There will only ever be one placement per adcollection
                audience.push(places[0]);
            }
            var gender = adcollection.get('gender');
            if (gender) {
                audience.push(genders[gender]);
            }
            var targetingSubsets = _.size(adcollection.get('targeting_subsets'));
            var typeStr = naivePlural(targetingSubsets, 'type');
            audience.push(targetingSubsets + ' targeting ' + typeStr);
            var locationSet = _.findWhere(locationSets, uri(adcollection.get('location_set')));
            var locationCount = _.size((locationSet || {}).locations);
            if (locationCount) {
                var locationStr = naivePlural(locationCount, 'location');
                audience.push(locationCount + ' ' + locationStr);
            }
            var ageRange = _.findWhere(ageRanges, uri(adcollection.get('age_range')));
            if (ageRange) {
                audience.push('ages ' + ageRange.min_age + ' - ' + ageRange.max_age);
            }
            adcollection.set('_audience', audience.join(', '));
        });
    },
    /**
     * @param {Object} response
     * @private
     */
    onMakeFail: function(response) {
        /** JSON response */
        var json = response.responseJSON || {};
        /** Trigger failure */
        record('channel:upload').failure();
        record('channel').message(json.error_message);
    },
    /**
     * @param {Function} callback
     */
    launch: function(model, response) {
        /** Modules */
        var Collection = record('collection:adcollections');
        /** Patch AdCollections */
        $.ajax({
            type: 'patch',
            url: '/api/advisor/v1/adcollection/',
            data: JSON.stringify({
                objects: Collection
            }),
            contentType: 'application/json',
            context: this,
            success: this.onUpload,
            error: this.onUploadFail
        });
        /** Message */
        record('channel').message('Save budget and bid');
    },
    onUpload: function(response) {
        /** Save */
        $.ajax({
            type: 'post',
            url: record('model:generic').get('adclusterUri') + 'launch/',
            success: this.onUploadDone,
            error: this.onUploadFail,
            context: this
        });
        /** Message */
        record('channel').message('Uploading to Facebook');
    },
    onUploadDone: function(response) {
        /** Trigger success */
        record('channel:launch').success();
        record('channel').message('Successful');
        this.navigate(response);
        record('review').triggerMethod('modal:close');
    },
    navigate: function(adGenInfo) {
        /** Redirect back to Campaign Details */
        var initiativeId = record('initiative').get('id');
        var campaignId = record('campaign').get('id');
        var uri = 'initiative/' + initiativeId + '/campaign/' + campaignId;
        AppChannel.trigger('navigate', uri);
        CampaignController.showCampaignDetails(initiativeId, campaignId, null, null, null, null, adGenInfo);
    },
    onUploadFail: function(response) {
        /** Parse message */
        var json = response.responseJSON;
        /** Trigger failure */
        var message = json ? (json.error || json.error_message || 'Denied') : response.statusText;
        record('channel:launch').failure();
        record('channel').message(message);
        this.trigger('failure', message);
    },
    /** @returns {Boolean} */
    allModelsBidAndBudgetAreValid: function() {
        return this.every(function(model) {
            return model.areBidAndBudgetValid();
        });
    }
});

module.exports = AdCollections;
