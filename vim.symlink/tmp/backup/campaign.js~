/* global dependencies */
var _ = require('underscore');
var Backbone = require('backbone');
var AppChannel = require('advisor/app-channel');

/* local dependencies */
var EntitiesPinterest = require('./base');

var Model = Backbone.Model.extend({
    url: function() {
        var cId = this.campaignId || this.get('campaignId');
        return '/api/advisor/v1/campaign/' + campaignId + '/dashboard/campaign/';
    },
    /** @return {Object} */
    fetchData: function() {
        return { id: this.get('id') };
    },
    /** @returns {String} The current model's status. */
    getStatus: function() {
        return this.get('status').toLowerCase();
    },
    /** @returns {Array} */
    getStatusActions: function() {
        var allActions = [{
            status: 'active',
            label: 'Pause',
            value: 'PAUSED'
        }, {
            status: 'paused',
            label: 'Resume',
            value: 'ACTIVE'
        }];
        return _.where(allActions, {
            status: this.getStatus()
        });
    },
    /** @returns {Array} */
    getEditableCells: function() {
        return ['end_time', 'budget_in_micro_dollar', 'status'];
    }
});
var Collection = EntitiesPinterest.Collection.extend({
    model: Model,
    /** @returns {String} */
    url: function() {
        return '/api/advisor/v1/campaign/' + this.campaignId + '/dashboard/campaign/';
    }
});

var getCampaignEntity = function(id, campaignId) {
    return EntitiesPinterest.getBaseEntity(id, Model, campaignId);
};
var getCampaignEntities = function(options) {
    return EntitiesPinterest.getBaseEntities(options, Collection);
};
var getPageableCampaignEntities = function(options, userCanManage) {
    return EntitiesPinterest.getPageableBaseEntities(Model, userCanManage);
};

AppChannel.reply('pinterest:campaign:entity', getCampaignEntity);
AppChannel.reply('pinterest:campaign:entities', getCampaignEntities);
AppChannel.reply('pinterest:campaign:PageableEntities', getPageableCampaignEntities);
