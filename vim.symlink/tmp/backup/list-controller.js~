import Marionette from 'backbone.marionette'
import Backbone from 'backbone'
import $ from 'jquery'
import { Asset, TestRegion, getCollection } from './shared'

import CreativeEntity from 'advisor/entities/advisor/creative'

import CreativeChannel from 'advisor/modules/creative/creative-channel'
import ListController from 'advisor/modules/creative/list/list-controller'

import LoadingView from 'advisor/common/loading-view'
import CreativesTableView from 'advisor/modules/creative/list/views/creatives-table-view'
import CreativesListView from 'advisor/modules/creative/list/views/creatives-list-view'

describe('creative list controller', () => {

    var lc, region

    beforeEach(() => {
        lc = new ListController()
        region = new TestRegion({
            el: $('<div>')
        })
    })

    afterEach(() => {
        region.reset()
    })

    it ('should be a Marionette Object', () => {
        expect(lc instanceof Marionette.Object).toBe(true)
    })

    describe('show method', () => {
        it ('should expose a `show` method', () => {
            expect(lc.show).toBeDefined()
            expect(typeof lc.show).toEqual('function')
        })

        it ('should throw if called with no arguments', () => {
            expect(() => { lc.show() }).toThrow()
        })

        it ('should throw if called without a region option', () => {
            expect(() => { lc.show({foo: 'bar'}) }).toThrow()
        })

        it ('should show the loading view when called', () => {
            let d = $.Deferred()

            spyOn(CreativeEntity, 'getCreativeCollection').and.callFake(() => {
                let Collection = AppChannel.request('advisor:creative:Entities')

                return d.resolve(new Collection([
                    { name: 'model a' },
                    { name: 'model b' }
                ]))
            })

            let asset = new Asset({
                platform: 'test'
            })

            expect(region.$el.children().length).toEqual(0)

            spyOn(region, 'show')
            lc.show({
                asset: asset,
                region: region
            })

            expect(region.show).toHaveBeenCalled()
            expect(region.show.calls.first().args[0] instanceof LoadingView).toBe(true)
        })
    })

    describe('after loading', () => {

        let show = function(mode, models, platform) {
            let d = $.Deferred()
            spyOn(CreativeEntity, 'getCreativeCollection').and.callFake(() => d.promise() )
            let asset = new Asset({ platform: platform || 'test' })
            lc.show({
                region: region,
                asset: asset,
                displaymode: mode
            })
            let collection = getCollection(models)
            d.resolve(collection)
            expect(CreativeEntity.getCreativeCollection).toHaveBeenCalled()
            return collection
        }

        describe('display modes', () => {

            it ('should show a list view when displaymode is undefined', () => {
                spyOn(region, 'show')
                show(null, [{id: 0}])
                expect(region.show).toHaveBeenCalled()
                expect(region.show.calls.mostRecent().args[0] instanceof CreativesListView).toBe(true)
            })

            it ('should show a list view when displaymode is set to list', () => {
                spyOn(region, 'show')
                show('list', [{id: 0}])
                expect(region.show).toHaveBeenCalled()
                expect(region.show.calls.mostRecent().args[0] instanceof CreativesListView).toBe(true)
            })

            it ('should show a table view when displaymode is set to table', () => {
                spyOn(region, 'show')
                show('table', [{id: 0}])
                expect(region.show).toHaveBeenCalled()
                expect(region.show.calls.mostRecent().args[0] instanceof CreativesTableView).toBe(true)
            })
        })

        describe('changing a collection', () => {
            it ('should fire an event on the creative channel', (done) => {
                let models = [{id: 0}]
                let collection = show('table', models)
                CreativeChannel.on('list:selected', (list) => {
                    expect(list).toEqual(models)
                    done()
                })
                collection.trigger('change')
            })
        })

    })

})
