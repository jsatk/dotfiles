/* global dependencies */
var _ = require('underscore');
var $ = require('jquery');
var moment = require('moment');

/* module definition */
var Language = {};

var timeZoneOffsetMins = moment().utcOffset() * -1;
var utils = {
    getIconClass: function(platform) {
        var classAttr = 'fa fa-fw fa-' + platform;
        switch (platform) {
            case 'facebook':
            case 'twitter':
                return classAttr + '-square';
            default:
                return classAttr;
        }
    },
    getPlatformIcon: function(platform) {
        platform = (platform || '').toLowerCase();
        var $icon = $('<i/>', {
            'class': utils.getIconClass(platform),
            'title': platform
        });
        return $icon;
    }
};
Language.en = {
    objective_classic: {
        'APP INSTALLS': 'App Installs',
        'APP_INSTALLS': 'App Installs',
        'CLICKS': 'Clicks to Website',
        'ENGAGEMENT': 'Post Engagement',
        'FANS': 'Page Likes',
        'FB_PIXEL_CONVERSIONS': 'Website Conversions',
        'OFFSITE CLICKS': 'Clicks to Website',
        'OFFSITE CONVERSIONS': 'Website Conversions',
        'VIDEO VIEWS': 'Video Views',
        'VIDEO_VIEWS': 'Video Views',
        'LINK_CLICKS': 'Clicks to Website'
    },
    // TODO: Change this to `facebook_objective`.
    objective: {
        'MOBILE_APP_INSTALLS': 'App Installs',
        'MOBILE_APP_ENGAGEMENT': 'App Engagements',
        'WEBSITE_CLICKS': 'Clicks to Website',
        'EVENT_RESPONSES': 'Event Responses',
        'OFFER_CLAIMS': 'Offer Claims',
        'PAGE_LIKES': 'Page Likes',
        'POST_ENGAGEMENT': 'Post Engagements',
        'VIDEO_VIEWS': 'Video Views',
        'VIDEO VIEWS': 'Video Views',
        'FB_PIXEL_CONVERSIONS': 'Website Conversions',
        'WEBSITE_CONVERSIONS': 'Website Conversions',
        'NONE': 'None'
    },
    twitter_objective: {
        'APP_ENGAGEMENTS': 'App Engagements',
        'APP_INSTALLS': 'App Installs',
        'CUSTOM': 'Custom',
        'TWEET_ENGAGEMENTS': 'Engagements',
        'FOLLOWERS': 'Followers',
        'LEAD_GENERATION': 'Leads on Twitter',
        'VIDEO_VIEWS': 'Video Views on Twitter',
        'WEBSITE_CLICKS': 'Website Clicks/Conversions'
    },
    instagram_objective: {
        'VIDEO_VIEWS': 'Video Views on Instagram',
        'WEBSITE_CLICKS': 'Website Clicks/Conversions'
    },
    pinterest_objective: {
        'APP_INSTALLS': 'App Installs',
        'PIN_ENGAGEMENTS': 'Pin Engagements',
        'WEBSITE_CONVERSIONS': 'Website Conversions',
        'WEBSITE_CLICKS': 'Website Clicks'
    },
    budget_adjustment: {
        'REALLOCATION': 'Reallocation',
        'MAKE_GOOD': 'Make Good',
        'VALUE_ADD_OR_COUPON': 'Value Add or Coupon',
        'OTHER': 'Other'
    },
    facebook_kpi: {
        'CPC': 'Per click',
        'CPM': 'Per impression',
        'CPofferclaim': 'Per offer claim',
        'CPlike': 'Per like',
        'CPeventresponse': 'Per event response',
        'CPE': 'Per engagement',
        'CPSE': 'Per storied engagement',
        'CPcomment': 'Per comment',
        'CPshare': 'Per share',
        'CPvideoview': 'Per video view',
        'CPvideoplay': 'Per video play',
        'CPlinkclick': 'Per link click',
        'CPconversion': 'Per conversion',
        'ROAS': 'Return on spend',
        'CPLC': 'Per link click',
        'CPI': 'Per install'
    },
    twitter_kpi: {
        'CPC': 'Per click',
        'CPM': 'Per 1000 impressions',
        'CPE': 'Per engagement',
        'CPI': 'Per install',
        'CPF': 'Per follower',
        'CPRT': 'Per retweet',
        'CPFV': 'Per favorite',
        'CPR': 'Per reply',
        'CPCE': 'Per card engagement',
        'CPLC': 'Per link click',
        'CPofferclaim': 'Per offer claim',
        'CPlike': 'Per like',
        'CPeventresponse': 'Per event response',
        'CPVV': 'Per video view',
        'CPA': 'Per action',
        'CPAE': 'Per app engagement',
        'CPL': 'Per lead'
    },
    instagram_kpi: {
        'CPC': 'Per click',
        'CPM': 'Per impression',
        'CPvideoview': 'Per video view',
        'CPvideoplay': 'Per video play'
    },
    pinterest_kpi: {
        'CPA_APP_INSTALL': 'Per app install',
        'CPA_PURCHASE': 'Per purchase',
        'CPC': 'Per click',
        'CPM': 'Per impression',
        'CPE': 'Per engagement'
    },
    facebook_kpi_actions: {
        'CPC': { singular:'Click', plural: 'Clicks'},
        'CPM': { singular:'Impression', plural: 'Impressions'},
        'CPofferclaim': { singular:'Offer Claim', plural: 'Offer Claims'},
        'CPlike': { singular:'Like', plural: 'Likes'},
        'CPeventresponse': { singular:'Event Response', plural: 'Event Responses'},
        'CPE': { singular:'Engagement', plural: 'Engagements'},
        'CPSE': { singular:'Storied Engagement', plural: 'Storied Engagements'},
        'CPcomment': { singular:'Comment', plural: 'Comments'},
        'CPshare': { singular:'Share', plural: 'Shares'},
        'CPvideoview': { singular:'Video View', plural: 'Video Views'},
        'CPvideoplay': { singular:'Video Play', plural: 'Video Plays'},
        'CPlinkclick': { singular:'Link Click', plural: 'Link Clicks'},
        'CPconversion': { singular:'Conversion', plural: 'Conversions'},
        'ROAS': { singular:'Return on Ad Spend', plural: 'Return on Ad Spend'},
        'CPLC': { singular:'Link Click', plural: 'Link Clicks'},
        'CPI': { singular:'Install', plural: 'Installs'}
    },
    twitter_kpi_actions: {
        'CPC': { singular:'Click', plural: 'Clicks'},
        'CPM': { singular:'Impression', plural: 'Impressions'},
        'CPE': { singular:'Engagement', plural: 'Engagements'},
        'CPI': { singular:'Install', plural: 'Installs'},
        'CPF': { singular:'Follower', plural: 'Followers'},
        'CPretweet': { singular:'Retweet', plural: 'Retweets'},
        'CPfavorite': { singular:'Favorite', plural: 'Favorites'},
        'CPreply': { singular:'Reply', plural: 'Replies'},
        'CPcardengagement': { singular:'Card Engagement', plural: 'Card Engagements'},
        'CPLC': { singular:'Link Click', plural: 'Link Clicks'},
        'CPofferclaim': { singular:'Offer Claim', plural: 'Offer Claims'},
        'CPlike': { singular:'Like', plural: 'Likes'},
        'CPeventresponse': { singular:'Event Response', plural: 'Event Responses'},
        'CPVV': { singular:'Video View', plural: 'Video Views'},
        'CPA': { singular:'Action', plural: 'Actions'}
    },
    pinterest_kpi_actions: {
        'CPA_APP_INSTALL': { singular: 'App Install', plural: 'App Installs' },
        'CPA_PURCHASE': { singular: 'Buyable Pin', plural: 'Buyable Pins' },
        'CPC': { singular:'Click', plural: 'Clicks' },
        'CPM': { singular:'Impression', plural: 'Impressions' },
        'CPE': { singular:'Engagement', plural: 'Engagements' }
    },
    kpi: {
        'FB_PIXEL_CONVERSIONS': 'Per Conversion',
        'OFFSITE CONVERSIONS': 'Per Conversion',
        'ENGAGEMENT': 'CPE',
        'FANS': 'Per Like',
        'CLICKS': 'Per Click',
        'OFFSITE CLICKS': 'Per Click',
        'APP_INSTALLS': 'Per Install',
        'APP INSTALLS': 'Per Install',
        'VIDEO_VIEWS': 'Per View',
        'VIDEO VIEWS': 'Per View'
    },
    results: {
        'FB_PIXEL_CONVERSIONS': 'Conversions',
        'OFFSITE CONVERSIONS': 'Conversions',
        'ENGAGEMENT': 'Engagements',
        'FANS': 'Page Likes',
        'CLICKS': 'Link Clicks',
        'OFFSITE CLICKS': 'Link Clicks',
        'APP_INSTALLS': 'App Installs',
        'APP INSTALLS': 'App Installs',
        'VIDEO_VIEWS': 'Video Views',
        'VIDEO VIEWS': 'Video Views'
    },
    initiativeStatus: {
        'ACTIVE': '<i class="fa fa-active-sc"></i>',
        'INACTIVE': '<i class="fa fa-inactive-sc"></i>',
        'COMPLETED': '<i class="fa fa-complete-sc"></i>'
    },
    initiativeFilterLabel: {
        //date filters
        'ALL_TIME': 'All time',
        'ENDING_TODAY': 'Ending today',
        'ENDING_NEXT_7_DAYS': 'Ending next 7 days',
        //general filters
        'ALL': 'All',
        'ACTIVE': 'Active',
        'INACTIVE': 'Inactive',
        'COMPLETE': 'Complete',
        'OFF_PACE': 'Off pace'
    },
    campaignFilters: [
        { 'type': 'ALL',         'label': 'All'          },
        { 'type': 'OVER',        'label': 'Over pacing'  },
        { 'type': 'UNDER',       'label': 'Under pacing' },
        { 'type': 'ON_DECK',     'label': 'On deck'      },
        { 'type': 'LIVE',        'label': 'Live'         },
        { 'type': 'PAUSED',      'label': 'Paused'       },
        { 'type': 'NO_ADS',      'label': 'Empty'        },
        { 'type': 'EXHAUSTED',   'label': 'Exhausted'    },
        { 'type': 'COMPLETED',   'label': 'Completed'    },
        { 'type': 'IN_PROGRESS', 'label': 'In progress'  }
    ],
    creativeFilters: [
        { 'type': 'all',    'label': 'All'             },
        { 'type': 'photo',  'label': 'Page post photo' },
        { 'type': 'status', 'label': 'Page post text'  },
        { 'type': 'link',   'label': 'Page post link'  },
        { 'type': 'video',  'label': 'Page post video' },
        { 'type': 'offer',  'label': 'Offer'           }
    ],
    facebookPlacementOptions: [
        { label: 'DESKTOP', value: 'desktop' },
        { label: 'FEED', value: 'feed' },
        { label: 'DESKTOP FEED', value: 'desktopfeed' },
        { label: 'MOBILE FEED', value: 'mobilefeed' },
        { label: 'RIGHT COLUMN', value: 'rightcolumn' },
        { label: 'HOME', value: 'home' }
    ],
    twitterPlacementOptions: [
        { label: 'TIMELINE', value: 'TWITTER_TIMELINE' },
        { label: 'SEARCH', value: 'TWITTER_SEARCH' }
    ],
    instagramPlacementOptions: [
        { label: 'INSTRAGRAM STREAM', value: 'instagramstream' }
    ],
    pinterestPlacementOptions: [
        { label: 'Default', value: 'default' }
    ],
    campaignStatusActions: [
        { 'type': 'pause',  'label': 'Pause'  },
        { 'type': 'activate', 'label': 'Resume' }
    ],
    targetingGenderOptions: [
        { label: 'Male', value: 'male' },
        { label: 'Female', value: 'female' }
    ],
    initiativeEditMessages: (function() {
        var warningIcon = '<i class="fa fa-exclamation-triangle"></i>';
        return {
            'UNSAVED': warningIcon + ' Unsaved changes.',
            'SAVE_ERROR': warningIcon + ' Error. Changes were not saved.'
        };
    })(),
    initiativeManageOptions: [
        { label: 'Follower', value: 0 },
        { label: 'Manager', value: 1 }
    ],
    chartNoDataMessage: 'No data',
    facebookAttributionWindows: [
        { label: '1 day', value: 1},
        { label: '7 days', value: 7},
        { label: '28 days', value: 28}
    ],
    /**
    * @param {Number} value
    * @returns {String}
    */
    getInitiativePaceMsg: function(value) {
        if (value === 0) {
            return 'All campaigns on pace';
        } else {
            return value + ' campaign' + (value > 1 ? 's' : '') + ' off pace';
        }
    },
    /**
     * @param {Number} value
     * @returns {String}
     */
    getInitiativeCampaignToggleMsg: function(value) {
        if (value === 0) {
            return '<button type="button" class="btn btn-link" disabled="disabled" >No campaigns</button>';
        } else {
            return '<button type="button" class="btn btn-link secondary-sc view-campaigns-sc campaign-toggle-sc collapsed">' +
                '<span class="view-campaigns-indicator-sc"><i class="fa fa-plus"></i> View </span>' +
                '<span class="hide-campaigns-indicator-sc"><i class="fa fa-times"></i> Hide </span>' +
                value + ' campaign' + (value > 1 ? 's' : '') +
                '</button>';
        }
    },
    /**
     * @param {Number} value
     * @returns {String}
     */
    getInsertionOrderOpportunitiesToggleMsg: function(value) {
        if (value === 0) {
            return '<button type="button" class="btn btn-link" disabled="disabled" >No opportunities</button>';
        } else {
            return '<button type="button" class="btn btn-link secondary-sc view-opportunities-sc opportunity-toggle-sc collapsed">' +
                '<span class="view-opportunities-indicator-sc"><i class="fa fa-plus"></i> View </span>' +
                '<span class="hide-opportunities-indicator-sc"><i class="fa fa-times"></i> Hide </span>' +
                value + ' opportunit' + (value > 1 ? 'ies' : 'y') +
                '</button>';
        }
    },
    /**
     * @param {String} UTCDate
     * @param {String} format DateTime format you wish to convert UTCDate into.
     * @returns {String} Passed in UTCDate converted to format.
     */
    getLocalDateFromUTC: function(UTCDate, format) {
        return moment(UTCDate)
            .subtract('minutes', timeZoneOffsetMins)
            .format(format || 'M/D/YY, h:mm a');
    },
    /**
    * @param {Object} options - Required properties: platform, kpi, value (count)
    * @returns {string} The label that follows kpi count for the platform.
    */
    getKPICountLabel: function(options) {
        var actionMap;
        var actionValues;
        var valueType;
        var value;
        options = options || {};
        switch (options.platform) {
            case 'FACEBOOK':
                actionMap = this.facebook_kpi_actions;
                break;
            case 'TWITTER':
                actionMap = this.twitter_kpi_actions;
                break;
        }
        if (actionMap) {
            actionValues = actionMap[options.kpi];
        }
        if (actionValues) {
            valueType = (options.value === 1) ? 'singular' : 'plural';
            value = actionValues[valueType];
        }
        return value || '';
    },
    getAccountNameHTML: function(account) {
        var $icon = utils.getPlatformIcon(account.platform);
        var noNameLabel = 'No name (' + account.account_id + ')';
        var $name = $('<span/>', {
            'text': account.display_name || noNameLabel
        });
        return $name.prepend($icon);
    },
    getAssetNameHTML: function(asset) {
        var $icon = utils.getPlatformIcon(asset.subplatform || asset.platform);
        var $img = $('<img/>', {
            'src': asset.picture
        });
        var $name = $('<span/>', {
            'class': 'sc-asset',
            'text': asset.name
        });
        return $name.prepend($icon).prepend($img);
    },
    getUserNameHTML: function(user) {
        var $avatar;
        var $name;
        var displayName = user.first_name && user.last_name ?
            user.first_name + ' ' + user.last_name :
            user.email;
        $avatar = $('<img/>', {
            src: user.image_url,
            title: displayName
        });
        $name = $('<span/>', {
            'class': 'sc-user',
            'html': displayName
        });
        return $name.prepend($avatar);
    },
    getPixelNameHTML: function(pixel) {
        var $icon = utils.getPlatformIcon(pixel.platform);
        var $name = $('<span/>', {
            'text': pixel.name
        });
        return $name.prepend($icon);
    },
    getSelectedOptionWrapper: function() {
        return $('<span/>', {
            'class': 'selected-option-sc'
        }).append($('<i/>', {
            'class': 'fa fa-check'
        }));
    },
    getPlacementOptions: function(platform) {
        switch (platform) {
            case 'FACEBOOK':
                return this.facebookPlacementOptions;
            case 'TWITTER':
                return this.twitterPlacementOptions;
            case 'INSTAGRAM':
                return this.instagramPlacementOptions;
            case 'PINTEREST':
                return this.pinterestPlacementOptions;
        }
    },
    getUserInitiativeRoleHTML: function(user) {
        return $('<span/>', {
            text: _.findWhere(this.initiativeManageOptions, {
                    value: Number(user.manage || false)
                }).label
        });
    },
    /**
     * Used to format duration from now.
     * @param  {String} stringDate - duration is measured from/to this date
     * @param {String} [unit = 'hours'] - unit to be used for duration calculation
     * @return {Object} - info that can be used to display duration
     */
    getDurationFromNowInfo: function(stringDate, unit) {
        var date = moment(stringDate).endOf('day');
        unit = unit || 'hours';
        if (!stringDate || !date.isValid()) {
            return {
                isPast: false,
                humanizedString: 'N/A',
                date: date
            };
        }
        var diffFromNow = date.diff(moment(), unit, true);
        var duration = moment.duration(diffFromNow, unit);
        return {
            isPast: diffFromNow < 0,
            duration: diffFromNow,
            durationString: duration.humanize(),
            date: date
        };
    },
    facebookPagePostStatus: {
        getPendingMessage: function(campaignName) {
            return 'Processing page post upload for ' + campaignName +
                '.  You’ll receive an email when the upload is complete!';
        },
        getSuccessMessage: function(campaignName, postsCount) {
            return 'Success! Uploaded ' + postsCount + ' page posts for ' +
                campaignName +'.';
        },
        getErrorMessage: function(campaignName, postsCount, failedPostsCount) {
            return 'Error.  ' + failedPostsCount + ' of ' + postsCount + ' page posts failed to upload for ' +
                campaignName + '.  You’ll receive an email with more details.';
        }
    }
};

Language.en.platforms = {
    'FACEBOOK': {
        objective: Language.en.objective,
        kpi: Language.en.facebook_kpi,
        kpi_actions: Language.en.facebook_kpi_actions,
        placement: Language.en.facebookPlacementOptions
    },
    'INSTAGRAM': {
        objective: Language.en.instagram_objective,
        kpi: Language.en.instagram_kpi,
        kpi_actions: Language.en.instagram_kpi_actions,
        placement: Language.en.instagramPlacementOptions
    },
    'TWITTER': {
        objective: Language.en.twitter_objective,
        kpi: Language.en.twitter_kpi,
        kpi_actions: Language.en.twitter_kpi_actions,
        placement: Language.en.twitterPlacementOptions
    },
    'PINTEREST': {
        objective: Language.en.pinterest_objective,
        kpi: Language.en.pinterest_kpi,
        kpi_actions: Language.en.pinterest_kpi_actions,
        placement: Language.en.pinterestPlacementOptions
    }
};

module.exports = Language;
