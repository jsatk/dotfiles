/**
 * A place for global helper methods.
 * Find yourself writing the same thing over and over across multiple files and classes? Put it here!
 */

/**
 * Returns `false` if a value is undefined, null, or an empty string.
 * @param value This can be anything.
 * @returns boolean based on whether or not the `value` param is `undefined`, `null` or an empty string.
 */

var Helpers = Helpers || {};

// TODO: Ask Luke if we should include a `NaN` check here.
Helpers.valueIsValid = function(value) {
    if (typeof value === 'undefined' || _.isNull(value) || value === '') {
        return false;
    }

    return true;
};

/**
 * Our custom underscore methods!
 */
_.mixin({
    updateObject: function(obj, key, value) {
        obj[key] = value;
        return obj;
    },

    capitalizeString: function(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },

    /**
     *  @param {object} obj
     *  @returns {boolean}
     */
    hasFile: function(obj) {
        return _.some(obj, function(val) {
            return _.isObject(val) ? _.hasFile(val) : val instanceof window.File;
        });
    },

    /**
     * @param {Array.<Object>} columns Array of Objects we are going to sort.
     * @param {Array.<String>} order List of strings corresponding to the name key on the objects in the columns array.
     * @param {String} key to sort order on.
     * @returns {Array.<Object>} List of sorted columns.
     */
    sortArrayOfObjects: function(arrayOfObjects, order, key) {
        return _(arrayOfObjects).map(function(object, index, arrayOfObjects) {
            return _(arrayOfObjects).findWhere(_.updateObject({}, key, order[index]));
        });
    },

    /**
     * Returns the current backbone history fragment without a trailing / if there is one.
     * Yes, I know this could be written as a ternary but it gets kind of gnarly. Thought a simple
     * if statement was more readable.
     * @returns {String}
     */
    getFragmentWithoutTrailingSlash: function() {
        var fragment = Backbone.history.fragment;

        if (fragment.charAt(fragment.length - 1) === '/') {
            fragment = fragment.slice(0, -1);
        }

        return fragment;
    },

    hasTruthyProperties: function(object, keys) {
        return !!object && _.every(keys, function(key) {
            return object.hasOwnProperty(key) && !!object[key];
        });
    }
});

/**
 * Adds Underscore String methods as a global on Undersore. See: https://github.com/epeli/underscore.string
 * We must use document.ready because... we do... sadly.
 */
$(document).on('ready', function() {
    _.string = window.s.exports();
});
