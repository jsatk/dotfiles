describe('Entities', function() {
    // TODO: Write test cases for these special little snowflakes.
    // 'audience:create-element:entity', // Creates a new model and saves to the server.
    // 'session:entity:clear', // Logs current user out.
    // 'session:entity:set', // Initializes the entire session with a passed in object.
    // 'session:grant:entities:can_create_initiatives', // Returns a boolean
    // 'session:grant:entities:can_mange_brand_or_initiative', // Returns a boolean
    // 'session:team:selected', // Returns a Backbone Model instance of the currently selected team.

    /**
     * ATTENTION! ATTENTION! ATTENTION! ATTENTION! ATTENTION! ATTENTION! ATTENTION! ATTENTION! ATTENTION!
     *
     * All commented-out request strings are commented out because we do not yet have off-line JSON fixtures for
     * them in the tests/fixtures folder. If you are inspired and have a bit of freetime please add a JSON
     * representation of data to our fixtures folder and uncomment the request string here! Thank you!
     */

    //     var entitiesRequestStrings = [
    //         // 'advisor:account:entities',
    //         // 'advisor:activity:entities',
    //         // 'advisor:asset:entities',
    //         // 'advisor:campaign:entities',
    //         // 'advisor:creative:entities',
    //         // 'advisor:initiative:entities',
    //         // 'advisor:pixel:entities',
    //         // 'advisor:tag:entities',
    //         // 'agencylocation:entities',
    //         // 'audience:entities',
    //         // 'audience:reachestimate:entity',
    //         // 'facebook:account:entities',
    //         'facebook:adcampaign:entities',
    //         'facebook:adgroup:entities',
    //         'facebook:adset:entities',
    //         // 'report:entities',
    //         // 'reports:facebookanalytics:PageableEntities',
    //         // 'reports:facebookanalytics:entity',
    //         // 'reports:twitteranalytics:PageableEntities',
    //         // 'session:grant:entities',
    //         // 'session:team:entities',
    //         'twitter:account:entities',
    //         'twitter:adgroup:entities',
    //         'twitter:campaign:entities',
    //         'twitter:fundinginstrument:entities'
    //         // 'user:entities'
    //     ];

    //     var EntitiesRequestStrings = [
    //         // 'advisor:account:Entities',
    //         // 'advisor:activity:Entities',
    //         // 'advisor:asset:Entities',
    //         // 'advisor:campaign:Entities',
    //         // 'advisor:creative:Entities',
    //         // 'advisor:initiative:Entities',
    //         // 'advisor:pixel:Entities',
    //         // 'advisor:tag:Entities',
    //         // 'audience:Entities',
    //         'facebook:adset:Entities'
    //         // 'user:Entities'
    //     ];

        var EntityRequestStrings = [
            'advisor:account:Entity',
            'advisor:asset:Entity',
            'advisor:campaign:Entity',
            'advisor:creative:Entity',
            'advisor:initiative:Entity',
            'advisor:pixel:Entity',
            'advisor:tag:Entity',
            'audience:Entity',
            'brand:Entity',
            'facebook:adset:Entity',
            'reportConfig:Entity',
            'user:Entity'
        ];

        var PageableEntitiesRequestStrings = [
            'advisor:account:PageableEntities',
            'advisor:asset:PageableEntities',
            'advisor:campaign:PageableEntities',
            'advisor:initiative:PageableEntities',
            'advisor:pixel:PageableEntities',
            'advisor:tag:PageableEntities',
            'facebook:adcampaign:PageableEntities',
            'facebook:adgroup:PageableEntities',
            'facebook:adset:PageableEntities',
            'twitter:adgroup:PageableEntities',
            'twitter:campaign:PageableEntities',
            'twitter:fundinginstrument:PageableEntities',
            'user:PageableEntities'
        ];

    var server; // Needs to be delcared at this scope so it's accessible everywhere inside this method.

    var entityRequests = [
        [ 'advisor:account:entity',           'advisor/v1/account'                       ],
        [ 'advisor:asset:entity',             'advisor/v1/asset'                         ],
        [ 'advisor:campaign:entity',          'advisor/v1/campaign'                      ],
        [ 'advisor:initiative:entity',        'advisor/v1/initiative'                    ],
        [ 'advisor:pixel:entity',             'advisor/v1/pixel'                         ],
        [ 'advisor:tag:entity',               'advisor/v1/viewtag'                       ],
        [ 'facebook:adcampaign:entity',       'facebook/ads/v1/adcampaign'               ],
        [ 'facebook:adgroup:entity',          'facebook/ads/v1/adgroup'                  ],
        [ 'facebook:adset:entity',            'facebook/ads/v1/adset'                    ],
        [ 'report:entity',                    'reports/v2/reportrun'                     ],
        [ 'twitter:adgroup:entity',           'twitter/ads/v1/twitterlineitem'           ],
        [ 'twitter:campaign:entity',          'twitter/ads/v1/twittercampaign'           ],
        [ 'twitter:fundinginstrument:entity', 'twitter/ads/v1/twitterfundinginstrument'  ]
    ];

    before(function() {
        server = sinon.fakeServer.create();
    });

    after(function() {
        server.restore();
    });

    var validResponse = function(responseText) {
        return [
            200,
            { "Content-Type": "application/json" },
            JSON.stringify(responseText)
        ];
    };

    _(entityRequests).each(function(entityRequest) {
        describe(entityRequest[0], function() {
            var testData, args;

            before(function() {
                testData = fixtures[entityRequest[1]];
                args     = [entityRequest[0], testData.id];
            });

            it('should return a jQuery promise', function() {
                server.respondWith(validResponse(testData));

                expect(AdvisorApp.request.apply(AdvisorApp, args)).to.be.a.promise;

                server.respond();
            });

            it('should return an instance with the correct data', function(done) {
                server.respondWith(validResponse(testData));

                AdvisorApp.request.apply(AdvisorApp, args).done(function(instance) {
                    expect(instance.id).to.equal(testData.id);
                    done();
                });

                server.respond();
            });

            it('should return a Backbone Model instance', function(done) {
                server.respondWith(validResponse(testData));

                AdvisorApp.request.apply(AdvisorApp, args).done(function(instance) {
                    expect(instance).to.be.a.BackboneModel;
                    done();
                });

                server.respond();
            });

            it('should return error message when no model exists', function(done) {
                server.respondWith([
                    404,
                    { "Content-Type": "application/json" },
                    JSON.stringify({ error_message: 'Oh No! 404!' })
                ]);

                AdvisorApp.request(entityRequest[0], 'bad id').fail(function(response) {
                    expect(response.responseJSON.error_message).to.equal('Oh No! 404!');
                    done();
                });

                server.respond();
            });
        });
    });

    _(EntityRequestStrings).each(function(EntityRequestString) {
        describe(EntityRequestString, function() {
            it('should return a function', function() {
                expect(typeof AdvisorApp.request(EntityRequestString)).to.equal('function');
            });
        });
    });

    _(PageableEntitiesRequestStrings).each(function(PageableEntitiesRequestString) {
        describe(PageableEntitiesRequestString, function() {
            it('should return a Backbone Tastypie Pageable Collection', function() {
                var Collection = AdvisorApp.request(PageableEntitiesRequestString);
                    collection = new Collection();

                expect(collection).to.be.a.BackboneTastypiePageableCollection;
            });
        });
    });
});
