/* global dependencies */
var Backbone = require('backbone');

/* local dependencies */
var record = require('../../record');

/* module definition */
var AdCluster = Backbone.Model.extend({
    url:   '/api/advisor/v1/adcluster/',
    parse: function() {
        return;
    },
    initialize: function() {
        /** Clear targeting collection */
        this.on('change:flexible', function() {
            this.get('targeting_sets').reset();
        });
    },
    make: function(model, response) {
        /** Set as flexible targeting */
        if (this.get('flexible')) {
            this.convertToFlexible();
        }
        /** Save model */
        this.save(null, {
            success: this.onMakeDone,
            error:   this.onMakeFail
        });
        /** Message */
        record('channel').message('Uploading clusters');
    },
    onMakeDone: function(model, response) {
        var collection = record('collection:adcollections');
        /** Make AdCollections */
        collection.make.apply(collection, arguments);
    },
    onMakeFail: function(model, response) {
        /** JSON response */
        var json = response.responseJSON || {};
        /** Trigger failure */
        record('channel:upload').failure();
        record('channel').message(json.error_message);
    },
    /** Format for flexible targeting */
    convertToFlexible: function() {
        var collection = new Backbone.Collection({
            'targeting_subsets': new Backbone.Collection()
        });
        var subset = function(children) {
            var model = new Backbone.Model({
                'include': new Backbone.Collection(),
                'exclude': new Backbone.Collection(),
                'targeting_type': 'flexible_spec'
            });
            children.get('targeting_subsets').each(function(child) {
                var include = child.get('include');
                var exclude = child.get('exclude');
                model.get('include').push(include.models);
                model.get('exclude').push(exclude.models);
            });
            collection.at(0).get('targeting_subsets').push(model);
        };
        this.get('targeting_sets').each(subset);
        this.set('targeting_sets', collection);
    }
});

module.exports = AdCluster;
